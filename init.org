#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/init.el
I failed in love with denote, so previous *org-roam* configs were refiled into [[file:useful-tools/old-elisps/org-roam-config.org][org-roam configs]]
* Content                                                               :toc:
- [[#startup-configs][Startup configs]]
  - [[#ui-speed-up][UI speed up]]
  - [[#basic-modes][basic modes]]
  - [[#load-path][load-path]]
  - [[#drop-out][drop out]]
  - [[#set-vars][set vars]]
- [[#package-management][Package Management]]
  - [[#setup][setup]]
  - [[#other-macros][other macros]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#meow][meow]]
  - [[#transient-and-related-leader-map][transient and related leader-map]]
  - [[#meow-leader-keybindings][meow leader keybindings]]
  - [[#which-key][which-key]]
  - [[#electric][electric]]
- [[#package-library][Package Library]]
  - [[#dash][dash]]
  - [[#s][s]]
  - [[#f][f]]
- [[#ui][UI]]
  - [[#font][font]]
  - [[#variable-pitch][variable-pitch]]
  - [[#theme][Theme]]
  - [[#line-number][line number]]
  - [[#nerd-icons][nerd-icons]]
  - [[#nerd-icons-completion][nerd-icons-completion]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#diff-hl][diff-hl]]
  - [[#fringe-mode][fringe-mode]]
  - [[#emacs-dashboard][emacs-dashboard]]
  - [[#mini-echo][mini-echo]]
  - [[#hl-todo][hl-todo]]
  - [[#highlight-line][highlight line]]
  - [[#show-paren-mode][show-paren-mode]]
- [[#general-configuration][General Configuration]]
  - [[#simple][simple]]
  - [[#general-builtin-modes][general builtin modes]]
  - [[#repeat-mode][repeat-mode]]
  - [[#backup][backup]]
  - [[#no-littering][no-littering]]
  - [[#recentf][recentf]]
  - [[#自动换行][自动换行]]
  - [[#long-line][long-line]]
  - [[#tramp][TRAMP]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#vundo-for-undo-history][vundo for undo history]]
- [[#search][Search]]
  - [[#isearch][isearch]]
  - [[#consult-commands][Consult Commands]]
  - [[#rgel][rg.el]]
- [[#补全][补全]]
  - [[#completions-with-vertico][Completions with Vertico]]
  - [[#orderless-and-pinyinlib][Orderless and pinyinlib]]
  - [[#marginalia][Marginalia]]
  - [[#embark][embark]]
  - [[#yasnippet][yasnippet]]
- [[#window-management][Window Management]]
  - [[#window][window]]
  - [[#winner-mode][winner-mode]]
  - [[#popper][popper]]
  - [[#move][Move]]
- [[#ibuffer][ibuffer]]
  - [[#ibuffer-1][ibuffer]]
- [[#input][Input]]
  - [[#posframe][posframe]]
  - [[#rime][rime]]
- [[#file-and-browsing][File and Browsing]]
  - [[#file-browsing][file browsing]]
  - [[#structure-browsing][structure browsing]]
  - [[#tab-line-and-tab-bar][tab-line and tab-bar]]
  - [[#tabspaces][tabspaces]]
  - [[#project][project]]
  - [[#project-rootfile][project-rootfile]]
  - [[#auto-insert][auto-insert]]
  - [[#midnight][midnight]]
- [[#shell][shell]]
  - [[#eshell][eshell]]
  - [[#eat][eat]]
- [[#git][git]]
  - [[#magit][magit]]
  - [[#ediff][ediff]]
- [[#program][Program]]
  - [[#language][Language]]
  - [[#useful-programing-tools][Useful programing tools]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org-mode]]
  - [[#org-src][org-src]]
  - [[#org-sidebar][org-sidebar]]
  - [[#org-zotero-parser][org-zotero-parser]]
  - [[#org-oxlatexwordmarkdown][org-ox,latex,word,markdown]]
  - [[#org-clock][org-clock]]
  - [[#org-timer][org-timer]]
  - [[#appt][appt]]
  - [[#ui-1][ui]]
  - [[#ox-hugo][ox-hugo]]
  - [[#org-present][org-present]]
  - [[#bibtex-related][bibtex related]]
  - [[#toc-org][toc-org]]
  - [[#denote-and-related][denote and related]]
  - [[#find-orgmode-dir-files][find orgmode dir files]]
  - [[#agendagtd][agenda/gtd]]
  - [[#org-srs][org-srs]]
  - [[#org-inc][org-inc]]
  - [[#insert-from-snipaste][insert from snipaste]]
  - [[#org-media-note][org-media-note]]
  - [[#org-sliced-images][org-sliced-images]]
- [[#阅读][阅读]]
  - [[#pdf-tools][pdf-tools]]
  - [[#pdf-view-pagemark][pdf-view-pagemark]]
  - [[#reader][reader]]
  - [[#newsticker][newsticker]]
  - [[#nov][nov]]
  - [[#darkroom][darkroom]]
  - [[#markdown-mode][markdown-mode]]
- [[#tools][tools]]
  - [[#ai-related][ai related]]
  - [[#webjump][webjump]]
  - [[#backup-scripts][backup scripts]]
  - [[#server][server]]
  - [[#macos-ocr][macos-ocr]]
  - [[#esup][esup]]
  - [[#uniline][uniline]]
  - [[#excalidraw][excalidraw]]
  - [[#manage-web-bookmarks][manage-web-bookmarks]]
- [[#games][games]]
  - [[#minesweeper][minesweeper]]
  - [[#blackjack][blackjack]]
- [[#system-specific-config][system-specific-config]]
  - [[#windows-wslg][windows-wslg]]
  - [[#android][android]]

* Startup configs
** UI speed up
#+NAME: ui-speed-up
#+begin_src elisp :tangle ~/.emacs.d/early-init.el
;; -*- lexical-binding: t; -*-
;; set gc according to EmacsConf 2023
;; (setq gc-cons-threshold 8000000
;;       gc-cons-percentage 0.2)
;; Package initialize occurs automatically, before `user-init-file' is
;; loaded, but after `early-init-file'. We handle package
;; initialization, so we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Inhibit resizing frame
(setq frame-inhibit-implied-resize t)
;; disable warning
(setq byte-compile-warnings nil)
;; no title bar
;; (add-to-list 'default-frame-alist '(undecorated . t))
;; Faster to disable these here (before they've been initialized)
;; (push '(alpha-background . 80) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
;; (push '(undecorated . t) default-frame-alist)
(setq initial-major-mode 'fundamental-mode ;; 默认用最简单的模式
      package--init-file-ensured t
      inhibit-startup-message t  ; 关闭启动 Emacs 时的欢迎界面
      )
;; speed font
;; (add-to-list 'default-frame-alist '(font . "Maple Mono SC NF"))

;; add support for android port of emacs
(if (eq system-type 'android)
    (progn
      (setenv "PATH" (format "%s:%s" "/data/data/com.termux/files/usr/bin"
		                     (getenv "PATH")))
      (push "/data/data/com.termux/files/usr/bin" exec-path)))

#+end_src
** basic modes
#+NAME: basic-modes
#+begin_src elisp
;; -*- lexical-binding: t; -*-
;; basic modes
(setq use-short-answers t)
(setq confirm-kill-emacs 'y-or-n-p)
(setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
(set-default-coding-systems 'utf-8)
(setq-default indent-tabs-mode nil)

(setq next-screen-context-lines 0) ;; scroll up/down lines
(setq-default tab-width 4)
;; 平滑地进行半屏滚动，避免滚动后recenter操作
(setq scroll-step 0
      scroll-conservatively 10000)
(setq redisplay-skip-fontification-on-input t)
(setq completions-detailed t) ;;useful in emacs 28
(setq use-dialog-box nil)               ;never pop dialog
(setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
#+end_src
** load-path
#+NAME: load-path
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
(require 'borg)
(setq borg-rewrite-urls-alist
      '(("git@github.com:" . "https://github.com/")
        ("git@gitlab.com:" . "https://gitlab.com/")))
(borg-initialize)
#+end_src
** drop out
The following content is not enabled yet, because I want to minimize unnecessary settings as much as possible
#+begin_src elisp :tangle no
;; Restore emacs session.
(setq initial-buffer-choice t)
(run-with-timer 1 nil #'(lambda () (bury-buffer)))
;; 增加IO性能
(setq process-adaptive-read-buffering nil)
(setq read-process-output-max (* 1024 1024))

(global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
(setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
(setq-default comment-style 'indent)    ;设定自动缩进的注释风格
(setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
(setq split-width-threshold nil)        ;分屏的时候使用上下分屏
(setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
(setq confirm-kill-processes nil)       ;退出自动杀掉进程
(setq async-bytecomp-allowed-packages nil) ;避免magit报错
(setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
      '((100 left)
        (24 right ((19 right)
                   (5 right)))))
(setq profiler-report-memory-line-format
      '((100 left)
        (19 right ((14 right profiler-format-number)
                   (5 right)))))

;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮
(setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
#+end_src
** set vars
I use the following file paths to manage all the files in Nowisemacs:
#+begin_example
emacs
├── 01-orgmode
│   ├── org-remark
│   └── xnotes
├── 02-binary-git/binary-files
│   ├── 01-pictures
│   ├── 02-searchable
│   ├── 03-stardicts
│   ├── 04-org-imagine
│   └── 10-report-backup
├── 03-bibliography
├── 04-beancount
├── 05-excalidraw
├── 06-anki
├── 07-pyim
│   └── dcache
├── 08-keys
└── 09-scripts
#+end_example
1. All files and folders except =02-binary-git/binary-files= are managed under git control, and =binary-file= is managed under =rsync= or =restic=.
2. =01-orgmode= stores .org files, where =org-remark= is used to store remark notes, =xnote= is the default directory of =Denote= .
3. =02-binary-git/binary-files=, as its name, storing binary-fils. For example, =02-searchable= is used store the PDF of the literature
   and daily MS Office files, the meaning of searchable means that all files under this folder maybe searched or
   modified latter, and they should have nice naming specifications for convenience search.

#+begin_src elisp
(defvar nowis-config-file (expand-file-name "init.org" user-emacs-directory))
(defvar nowis-config-useful-tools (expand-file-name "useful-tools/" user-emacs-directory))
(defvar nowis-doc-emacs-dir (file-truename "~/Documents/emacs/"))
(defvar nowis-gtd-dir (concat nowis-doc-emacs-dir "01-orgmode/xnotes/gtd"))
(defvar nowis-bib-dir (concat nowis-doc-emacs-dir "03-bibliography/"))
(defvar nowis-bib-pdf-dir (concat nowis-doc-emacs-dir "02-binary-git/binary-files/02-searchable/01-papers-markable/"))
#+end_src
* Package Management
** setup
#+NAME: setup
#+begin_src elisp
(require 'setup)
(setup-define :defer
  (lambda (features)
    `(run-with-idle-timer 2 nil
                          (lambda ()
                            ,features)))
  :documentation "Delay loading the feature until a certain amount of idle time has passed."
  :repeatable t)
(setup-define :load-after
  (lambda (features &rest body)
    (let ((body `(progn
                   (require ',(setup-get 'feature))
                   ,@body)))
      (dolist (feature (if (listp features)
                           (nreverse features)
                         (list features)))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES."
  :indent 1)
(setup-define :autoload
  (lambda (func)
    (let ((fn (if (memq (car-safe func) '(quote function))
                  (cadr func)
                func)))
      `(unless (fboundp (quote ,fn))
         (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
  :documentation "Autoload COMMAND if not already bound."
  :repeatable t
  :signature '(FUNC ...))
#+end_src
** other macros
#+begin_src elisp
(defmacro with-idle-delay (secs &rest body)
  "Emacs 启动并空闲 SECS 秒后执行 BODY，仅执行一次。"
  `(run-with-idle-timer
    ,secs nil
    (lambda () ,@body)))
#+end_src
* Keyboard Bindings
I used to be a vim(evil) user, but now I use meow to manage all my keys.
** meow
Maybe I should add a new state.
#+name: meow
#+begin_src elisp
(setup meow
  (require 'meow)
  (setq meow-use-keypad-when-execute-kbd nil
        meow-expand-exclude-mode-list nil
        meow-use-clipboard t
        ;; meow-cursor-type-normal 'box
        ;; meow-cursor-type-insert '(bar . 1)
        meow-replace-state-name-list '((normal . "N")
                                       (motion . "M")
                                       (keypad . "K")
                                       (insert . "I")
                                       (beacon . "B"))
        meow-use-enhanced-selection-effect t
        meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
        meow-keypad-start-keys '((?c . ?c)
                                 (?x . ?x))
        meow-char-thing-table '((?\( . round)
                                (?\) . round)
                                (?\[ . square)
                                (?\] . square)
                                (?\{ . curly)
                                (?\} . curly)
                                (?\" . string)
                                (?w . symbol)
                                ;; (?w . window)
                                (?b . buffer)
                                (?p . paragraph)
                                (?l . line)
                                (?d . defun)
                                (?s . sentence))
        )
  ;; motion keys
  (meow-motion-define-key '("j" . meow-next)
                          '("J" . meow-next-expand)
                          '("k" . meow-prev)
                          '("K" . meow-prev-expand)
                          '("h" . meow-left)
                          '("H" . meow-left-expand)
                          '("l" . meow-right)
                          '("L" . meow-right-expand)
                          '("v i" . meow-inner-of-thing)
                          '("v a" . meow-bounds-of-thing)
                          '("y" . meow-save)
                          '("<escape>" . ignore)
                          '("." . repeat)
                          '("!" . kmacro-start-macro-or-insert-counter)
                          '("@" . meow-end-or-call-kmacro)
                          )

  ;; normal keys
  (setq wrap-keymap
        (let ((map (make-keymap)))
          (suppress-keymap map)
          (dolist (k '("(" "[" "{" "<" "\"" "*"))
            (define-key map k #'insert-pair))
          map
          ))

  (meow-normal-define-key '("0" . meow-expand-0)
                          '("9" . meow-expand-9)
                          '("8" . meow-expand-8)
                          '("7" . meow-expand-7)
                          '("6" . meow-expand-6)
                          '("5" . meow-expand-5)
                          '("4" . meow-expand-4)
                          '("3" . meow-expand-3)
                          '("2" . meow-expand-2)
                          '("1" . meow-expand-1)

                          '("a" . meow-vim-append)
                          ;; '("A" . meow-append-vim)
                          '("b" . meow-back-word)
                          '("B" . meow-back-symbol)
                          '("c c" . meow-change)
                          '("d" . meow-kill)
                          '("e" . meow-next-word)
                          '("E" . meow-next-symbol)
                          '("f" . meow-find)
                          '("g" . g-extra-commands)
                          '("G" . meow-grab)
                          '("h" . meow-left)
                          '("H" . meow-left-expand)
                          '("i" . meow-insert)
                          ;; '("I" . meow-insert-vim)
                          '("j" . meow-next)
                          '("J" . meow-next-expand)
                          '("k" . meow-prev)
                          '("K" . meow-prev-expand)
                          '("l" . meow-right)
                          '("L" . meow-right-expand)
                          '("m" . consult-register-store)
                          '("M" . meow-block)
                          '("n" . meow-search)
                          '("N" . meow-pop-selection);;

                          '("o" . meow-open-below)
                          '("O" . meow-open-above)
                          '("p" . meow-yank)
                          '("P" . meow-yank-pop);;
                          '("q" . meow-quit)
                          '("Q" . consult-goto-line)
                          '("r" . meow-replace)
                          '("R" . meow-swap-grab)
                          '("s" . meow-line)
                          '("S" . meow-kmacro-lines) ;;
                          '("t" . meow-till)
                          '("u" . meow-undo)
                          '("U" . vundo)
                          '("v v" . meow-visit) ;;
                          '("V" . meow-kmacro-matches) ;;
                          '("w" . meow-mark-word)
                          '("W" . meow-mark-symbol)

                          '("x" . meow-delete)
                          '("X" . meow-backward-delete)
                          '("y" . meow-save)
                          ;; '("Y" . meow-sync-save)
                          '("z a" . hs-toggle-hiding)
                          '("z c" . hs-hide-block)
                          '("z o" . hs-show-block)
                          '("z m" . hs-hide-all)
                          '("z r" . hs-show-all)
                          '("z z" . recenter-top-bottom)

                          '("v i" . meow-inner-of-thing)
                          '("v a" . meow-bounds-of-thing)
                          '("v =" . insert-equation)

                          '("-" . negative-argument)
                          '("=" . indent-region)
                          '("(" . backward-sentence)
                          '(")" . forward-sentence)
                          '("{" . backward-paragraph)
                          '("}" . forward-paragraph)
                          '("]" . nowis-graphviz-symbol-with-label)
                          ;; '("]" . (lambda()
                          ;;           (interactive)
                          ;;           (meow-bounds-of-thing ?\")))
                          (cons "\\" wrap-keymap)
                          '(";" . meow-expand-1)
                          ;; '(":" . async-shell-command)
                          '("'" . consult-register-load)
                          '("\"" . consult-register)
                          '("," . meow-reverse)
                          '("." . repeat)

                          '("<escape>" . ignore)
                          '("!" . kmacro-start-macro-or-insert-counter)
                          '("@" . meow-end-or-call-kmacro)
                          '("#" . embark-toggle-highlight)
                          '("^" . meow-join)
                          '("*" . embark-next-symbol)
                          '("/" . isearch-forward))
  (defun meow-vim-append ()
    "Like vim, move to the end of selection, switch to INSERT state."
    (interactive)
    (if meow--temp-normal
        (progn
          (message "Quit temporary normal mode")
          (meow--switch-state 'motion))
      (if (not (region-active-p))
          (progn
            (when (and meow-use-cursor-position-hack
                       (< (point) (point-max)))
              (forward-char 1))
            (forward-char 1)
            )
        (meow--direction-forward)
        (meow--cancel-selection))
      (meow--switch-state 'insert)))
  (meow-global-mode 1)

  (defun toggle-between-meow-normal-motion()
    (interactive)
    (if meow-motion-mode (meow-normal-mode) (meow-motion-mode)))
  (global-set-key (kbd "M-\\") #'toggle-between-meow-normal-motion)
  )
#+end_src

** transient and related leader-map
*** transient
#+name: transient
#+begin_src elisp
(setup transient
  (require 'transient)
  (:with-map transient-base-map
    (:bind "<escape>" transient-quit-one)))
#+end_src
*** g in normal mode
#+begin_src elisp
(transient-define-prefix g-extra-commands()
  "Define notes leader-key maps"
  [["Code find"
    ("d" "find-definitions" (lambda () (interactive) (call-interactively (key-binding (kbd "M-.")))))
    ("D" "find-references" xref-find-references)
    ("i" "find-impl" eglot-find-implementation)
    ("s" "find-symbols" xref-find-apropos)
    ("o" "find-def-other-window" xref-find-definitions-other-window)
    ]
   ["Code action"
    ("a" "code-actions" eglot-code-actions)
    ("r" "rename" eglot-rename)
    ("f" "format-all-region" format-all-region)
    ("F" "format-all-buffer" format-all-buffer)]
   ["diagnostic"
    ("n" "jump-to-next-diagnostic" flymake-goto-next-error)
    ("N" "jump-to-prev-diagnostic" flymake-goto-prev-error)
    ("l" "list-diagnostics" consult-flymake)
    ]
   ["Navigate"
    ("m" "consult-mark" consult-mark)
    ]
   ["citre"
    ("c d" "citre-jump" citre-jump)
    ("c D" "citre-jump-to-reference" citre-jump-to-reference)
    ("c p" "citre-peek" citre-peek)
    ("c P" "citre-peek-reference" citre-peek-reference)
    ("c r" "citre-peek-restore" citre-peek-restore)
    ("c a" "citre-ace-peek" citre-ace-peek)
    ("c u" "update-tags-file" citre-update-this-tags-file)
    ("c s" "peek-save-session" citre-peek-save-session)
    ("c l" "peek-load-session" citre-peek-load-session)
    ]
   ])
#+end_src
*** find-file
#+begin_src elisp
(transient-define-prefix file-leader-map()
  "Define leader-key map for file-related functions"
  [["config"
    ("p" "personal emacs config" (lambda()
                                   (interactive)
                                   (find-file nowis-config-file)))
    ("e" "emacs documents" (lambda()
                             (interactive)
                             (find-file nowis-doc-emacs-dir)))
    ("d" "dot files" (lambda()
                       (interactive)
                       (find-file "~/dotfiles")))
    ]
   ["history"
    ("r" "recent file" consult-recent-file)]])
#+end_src
*** lewis
#+begin_src elisp
(transient-define-prefix lewis-leader-map()
  "Define leader-key map for special functions"
  [
   ["Imenu"
    ("l" "Imenu list smart toggle" imenu-list-smart-toggle)
    ("o" "org mode sidebar" nowis-org-toggle-sidebar)
    ;; ("L" "Boxy imenu" boxy-imenu)
    ]
   ["gptel"
    ("a" "aibo" gptel-aibo)
    ("i" "gptel-aibo-summon/insert" gptel-aibo-summon)
    ("r" "gptel-rewrite" gptel-rewrite)
    ("f" "gptel-file-add" gptel-add-file)
    ("q" "gptel-quick" gptel-quick)
    ]
   ])
#+end_src
*** buffer
#+begin_src elisp
(transient-define-prefix buffer-leader-map()
  "Define leader-key map for buffer functions"
  [["Buffer"
    ("b" "consult-buffer" consult-buffer) ;; work with C-x b
    ("k" "kill-current-buffer" kill-current-buffer)
    ("l" "meow-last-buffer" meow-last-buffer)
    ("n" "next-buffer" next-buffer)
    ("p" "previous-buffer" previous-buffer)
    ("r" "revert-buffer" revert-buffer)
    ("c" "clean-buffer" clean-buffer-list)
    ("s" "scratch-buffer" scratch-buffer)
    ]
   ["Bookmark"
    ("j" "bookmark-jump" bookmark-jump)
    ("m" "bookmark-set" bookmark-set)
    ("M" "bookmark-delete" bookmark-delete)]
   ]
  )
#+end_src
*** notes
#+begin_src elisp
(transient-define-prefix notes-leader-map()
  "Define leader-key map for notes functions"
  [["Roam"
    ("r f" "denote-open-or-create" denote-open-or-create)
    ("r j" "denote-journal" denote-journal-new-or-existing-entry)
    ("r s" "find-all-searchable" project-find-searchable-dir-files)
    ("r c" "calendar" calendar)
    ("r w" "week-target" my/denote-journal-this-week-major-tasks)
    ("r g" "project-find-gtd-dir-files" project-find-gtd-dir-files)
    ("r e" "find excalidraw" (lambda ()
                               (interactive)
                               (let ((denote-directory org-excalidraw-default-directory))
                                 (call-interactively #'denote-open-or-create)
                                 )))
    ]
   ["bibtex"
    ("e" "ebib" ebib)
    ("b" "citar-open" citar-open)
    ]
   ["review cards"
    ("s" "org-srs" org-srs-transient-map)
    ]
   ]
  )
#+end_src
*** search
#+begin_src elisp
(transient-define-prefix search-leader-map()
  "Define leader-key map for search functions"
  [
   ;; ["blink-search"
   ;;  ("b" "blink-search" blink-search)]
   ["grep"
    ("d" "consult-rg-in-dir" lewis/ripgrep-search-other-dir)
    ("D" "consult-rg" consult-ripgrep)
    ("g" "rg" rg)
    ("n" "grep-notes" lewis/ripgrep-search-notes)
    ]
   ["find"
    ("f" "consult-fd-in-dir" lewis/find-file-other-dir)
    ("F" "consult-fd" consult-fd)
    ]
   ["built-in enhance"
    ("h" "history" consult-history)
    ("i" "imenu" consult-imenu)
    ("l" "keep-lines" consult-keep-lines)
    ("s" "line" consult-line)]
   ["web search"
    ("w" "webjump" webjump)
    ("a" "add bookmark" my/add-bookmark)
    ("b" "browse bookmark" my/consult-org-bookmarks)
    ]
   ])
#+end_src
*** apps
#+begin_src elisp
(transient-define-prefix apps-leader-map()
  "Define leader-key map for apps functions"
  [["agenda"
    ("a" "org-agenda" org-agenda)
    ("c" "capture" org-capture)
    ("A" "archive" nowis-org-archive-subtree)
    ]

    ["shell"
     ;; ("i" "toggle-insert-cd" eat-toggle-insert-dir)
     ]
    ["others"
     ;; ("t" "org-pomodoro" org-pomodoro)
     ;; ("l" "app-launcher-run-app" app-launcher-run-app)
     ;; ("e" "elfeed" my-elfeed)
     ("r" "restart emacs" restart-emacs)
     ("w" "whisper" whisper-run)
     ]
    ])
#+end_src
*** ui
#+begin_src elisp
(transient-define-prefix toggle-leader-map()
  "Define leader-key map for ui functions"
  [("v" "toggle-variable-pitch" variable-pitch-mode)
   ("d" "toggle-darkroom" darkroom-mode)
    ])
#+end_src
*** tui-support
#+begin_src elisp
(unless (display-graphic-p)
  (xterm-mouse-mode 1))
#+end_src
** meow leader keybindings
#+name: meow-leader-keys
#+begin_src elisp
;; default
(meow-leader-define-key
 ;; Use SPC (0-9) for digit arguments.
 '("1" . meow-digit-argument)
 '("2" . meow-digit-argument)
 '("3" . meow-digit-argument)
 '("4" . meow-digit-argument)
 '("5" . meow-digit-argument)
 '("6" . meow-digit-argument)
 '("7" . meow-digit-argument)
 '("8" . meow-digit-argument)
 '("9" . meow-digit-argument)
 '("0" . meow-digit-argument)
 '("/" . meow-keypad-describe-key)
 '("?" . meow-cheatsheet)

;; buffer
;; (meow-leader-define-key
 '("b" . buffer-leader-map)
 ;; lewisliu
 '("e" . lewis-leader-map)
 ;; search
 '("s" . search-leader-map)
 ;; apps
 '("a" . apps-leader-map)
 ;; file
 '("f" . file-leader-map)
 ;; notes
 '("n" . notes-leader-map)
 ;;w workspace
 '("TAB" . tabspaces-leader-map)
 ;; ;; org gtd
 ;; '("d" . org-gtd-leader-map)
 ;; ui
 '("t" . toggle-leader-map)
 ;; '("d" . dictionary-leader-map)

 ;; remark
 '("r m" . org-remark-mark)
 '("r l" . org-remark-mark-line) ; new in v1.3
 '("r o" . org-remark-open)
 '("r ]" . org-remark-view-next)
 '("r [" . org-remark-view-prev)
 '("r r" . org-remark-remove)
 '("r d" . org-remark-delete)
 )
#+end_src
** which-key
#+name: which-key
#+begin_src elisp
(setup which-key
  (setq which-key-idle-delay 0.1)
   (which-key-mode)
  )
#+end_src
** electric
#+begin_src elisp
(setup elec-pair
  (electric-pair-mode))
#+end_src
* Package Library
** dash
#+begin_src elisp
(setup dash)
#+end_src
** s
#+begin_src elisp
(setup s)
#+end_src
** f
#+begin_src elisp
(setup f)
#+end_src
* UI
** font
#+name: font
#+begin_src elisp
(defun font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

;; font size
(if (eq system-type 'darwin)
    (defvar lewis-font-size 140)
  (defvar lewis-font-size 150))

;; fixed font
(setq lewis-fixed-font (cl-loop for font in '(
                                              "Maple Mono NF CN"
                                              "Maple Mono SC NF"
                                              "Unifont"
                                              ;; "InconsolataGo QiHei NF"
                                              ;; "yaheiInconsolata"
                                              "JetBrainsMono Nerd Font"
                                              "JetBrains Mono"
                                              "Sarasa Mono SC Nerd"
                                              "Monaco"
                                              "Consolas"
                                              )
                                when (font-installed-p font)
                                return font))
;; variable font
(setq lewis-variable-font (cl-loop for font in '(
                                                 "IBM Plex Sans SC"
                                                 "Noto Sans CJK SC"
                                                 "Times"
                                                 "Helvetica"
                                                 "LXGW WenKai"
                                                 "Maple UI"
                                                 ;; "Source Han Sans SC VF"
                                                 "Arial"
                                                 "Times New Roman")
                                   when (font-installed-p font)
                                   return font))

;; chinese font
(setq lewis-chinese-font (cl-loop for font in '(
                                                "Maple Mono SC NF"
                                                "Unifont"
                                                "Sarasa Mono SC Nerd"
                                                "Microsoft Yahei")
                                  when (font-installed-p font)
                                  return font))

;; symbol font
(setq lewis-symbol-font (cl-loop for font in '("Symbols Nerd Font Mono"
                                               "Symbola"
                                               "Symbol"
                                               )
                                 when (font-installed-p font)
                                 return font))

;; mayby I should remove all this font-seting and use only default font
(defun nowis-setup-fonts()
  "Setup fonts."
  (when (display-graphic-p)
    ;; Set default font
    (if lewis-fixed-font
        (progn
          (set-face-attribute 'default nil :family lewis-fixed-font :height lewis-font-size)
          ;; (set-face-attribute 'fixed-pitch nil :family lewis-fixed-font :height 1.0)
          ))

    ;; variable-pitch
    (if lewis-variable-font
        (set-face-attribute 'variable-pitch nil :family lewis-variable-font :height 1.0))

    ;; Specify font for all unicode characters
    (if lewis-symbol-font
        (set-fontset-font t 'unicode lewis-symbol-font nil 'prepend))

    ;; Specify font for Chinese characters
    ;; (if lewis-chinese-font
    ;;     (set-fontset-font t '(#x4e00 . #x9fff) lewis-chinese-font))
    )
  )

(nowis-setup-fonts)
#+end_src
** variable-pitch
#+begin_src elisp
(defun dynamic-change-line-spacing( &optional ARG)
  (if line-spacing (setq-local line-spacing nil) (setq-local line-spacing 0.3)))
(advice-add 'variable-pitch-mode :after #'dynamic-change-line-spacing)
#+end_src
** Theme
*** modus-themes
#+begin_src elisp
(setup modus-themes
  (load-theme 'modus-vivendi t)
  ;; (setq modus-themes-common-palette-overrides
  ;;     '((fg-heading-1 blue)
  ;;       (fg-heading-2 fg-main)
  ;;       (fg-heading-3 fg-main)
  ;;       (fg-heading-4 fg-main)
  ;;       (fg-heading-5 fg-main)
  ;;       (fg-heading-6 fg-main)
  ;;       (fg-heading-7 fg-main)
  ;;       ))
  )
#+end_src
*** ef-themes
#+name: themes
#+begin_src elisp
(setup ef-themes)
;; (load-theme 'ef-trio-dark t)
#+end_src
** line number
#+name: line-number
#+begin_src elisp
(setq line-number-display-limit large-file-warning-threshold)
;; only enable line number in some modes, borrowed from lazycat-emacs
(dolist (hook (list
               'prog-mode-hook
               ;;'org-mode-hook
               ))
  (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src
** nerd-icons
#+begin_src elisp
(setup nerd-icons)
#+end_src
** nerd-icons-completion
#+begin_src elisp
(setup nerd-icons-completion
  (:hook-into vertico-mode marginalia-mode))
#+end_src
** rainbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src elisp
(setup rainbow-delimiters
  (:hook-into prog-mode))
#+end_src
** diff-hl
diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src elisp
(setup diff-hl
  (:hook-into prog-mode)
  (:when-loaded
    (diff-hl-margin-mode)))
#+end_src
** fringe-mode
#+begin_src elisp
(setup fringe
  (if (featurep 'fringe)
      (fringe-mode 4)
    ))
#+end_src
** emacs-dashboard
#+begin_src elisp :tangle no
(setup dashboard
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          )
        dashboard-icon-type 'nerd-icons
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-startup-banner (concat nowis-config-useful-tools "banner.txt")
        dashboard-set-init-info t)
  (dashboard-setup-startup-hook)
  )
#+end_src
*** my-simple-start
#+begin_src elisp
   (add-hook 'emacs-startup-hook
     (lambda ()
       (message "Emacs loaded in %s" (emacs-init-time))))
#+end_src
** mini-echo
#+begin_src elisp
(setup hide-mode-line)
(setup mini-echo
  ;; set default segments of long/short style
  (setq mini-echo-persistent-rule
        '(:long
          ("major-mode" "vcs" "time" "flymake" "process"
           "narrow"  "profiler" "repeat" "buffer-size" "buffer-position" "buffer-percent" "shrink-path"  "meow" "macro" "org-clock" "org-timer")
          ;; remove "selection-info"
          :short
          ("major-mode" "vcs" "time" "buffer-size" "buffer-position" "shrink-path"  "meow" "macro" "org-clock" "org-timer")))
  (setq mini-echo-separator "  ")
  (setq mini-echo-window-divider-args '(t 2 2))
  (setq mini-echo-update-interval 0.04)
  (unless (display-graphic-p)
    (setq mini-echo-right-padding 1)
    )
  (mini-echo-mode -1)
  (:when-loaded
    (mini-echo-define-segment "org-clock"
      "Return org-clock."
      :fetch
      (when (and (fboundp 'org-clocking-p)
                 (org-clocking-p)
                 (not
                  (and (boundp 'org-timer-mode-line-string)
                       org-timer-start-time)))
        (let* ((time-string (org-clock-get-clock-string))
               (time-face 'mini-echo-magenta))
          (mini-echo-segment--print time-string time-face))))

    (mini-echo-define-segment "org-timer"
      "Return org-clock."
      :fetch
      (when (and (boundp 'org-timer-mode-line-string)
                 org-timer-start-time)
        (mini-echo-segment--print (concat "⏱" org-timer-mode-line-string) 'diff-added)))
    (mini-echo-define-segment "time"
      "Show the current time."
      :fetch
      (mini-echo-segment--print (format-time-string "%H:%M Day%u") 'mini-echo-green))
    (mini-echo-define-segment "buffer-percent"
      "Return the current line as a percentage of total lines in buffer."
      :fetch
      (when-let* ((total-lines (line-number-at-pos (point-max)))
                  (current-line (line-number-at-pos (point)))
                  ((> total-lines 0)))
        (format "%d%%" (/ (* current-line 100) total-lines))))
    (mini-echo-mode)
    ))
#+end_src
** hl-todo
#+begin_src elisp
(setup hl-todo
  (global-hl-todo-mode))
#+end_src
** highlight line
*** hl-line
#+begin_src elisp
(setup hl-line
  (:global "C-l" #'nowis-recenter)
  ;; Only highliht current buffer in current window
  (setq hl-line-sticky-flag nil
        global-hl-line-sticky-flag nil)
  (global-hl-line-mode)
  (:when-loaded
    ;; update only 0.05 timer
    (defvar my/global-hl-line-timer nil)

    (defun my/global-hl-line-highlight-debounce ()
      (when my/global-hl-line-timer
        (cancel-timer my/global-hl-line-timer))
      (setq my/global-hl-line-timer
            (run-with-idle-timer 0.05 nil #'global-hl-line-highlight)))
    (remove-hook 'post-command-hook #'global-hl-line-highlight)
    (add-hook 'post-command-hook #'my/global-hl-line-highlight-debounce)

    ))
  (defun nowis-recenter ()
    (interactive)
    (call-interactively 'recenter)
    (pulsar-pulse-line))
  (defvar my-hl-line-timer nil)
#+end_src
*** pulsar
#+begin_src elisp
(setup pulsar
  (pulsar-global-mode 1)
  (setq pulsar-delay 0.015
        pulsar-iterations 10)
  (:when-loaded
    (add-hook 'pulsar-pulse-functions 'ace-window)))
#+end_src
** show-paren-mode
#+begin_src elisp
(setup paren
  (setq show-paren-context-when-offscreen 'child-frame))
#+end_src
* General Configuration
** simple
#+begin_src elisp
(setup simple
  ;; show line/column/filesize in modeline
  (setq line-number-mode t
        column-number-mode t
        size-indication-mode t
        kill-do-not-save-duplicates t
        shell-command-prompt-show-cwd t
        what-cursor-show-names t)
  ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)

  ;; (global-visual-line-mode)
  (dolist (hook (list
                 'prog-mode-hook
                 'org-mode-hook
                 'vterm-mode-hook
                 ))
    (add-hook hook (lambda () (visual-line-mode))))
  )
#+end_src
** general builtin modes
#+begin_src elisp
(setup save-place
   (save-place-mode)
  )

(setup autorevert
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode t)); 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer

(setup frame
  (blink-cursor-mode -1) ;指针不闪动
  )

;; (setup pixel-scroll
;;   (when (>= emacs-major-version 29)
;;     (pixel-scroll-precision-mode t)))
#+end_src
** repeat-mode
#+begin_src elisp
(setup repeat
  (repeat-mode))
#+end_src
** backup
*** auto-save
#+begin_src elisp
(setup auto-save
  (setq auto-save-default nil
        create-lockfiles nil
        make-backup-files nil
        auto-save-visited-interval 1)
  (auto-save-visited-mode)
  )
#+end_src
*** savehist
#+begin_src elisp
(setup savehist
  (setq history-length 100
        history-delete-duplicates t
        savehist-save-minibuffer-history t)
  (savehist-mode))
#+end_src
** no-littering
#+begin_src elisp
(setup no-littering
   (require 'no-littering)
  )
#+end_src
** recentf
#+begin_src elisp
(setup recentf
  (setq recentf-max-saved-items 50
        recentf-exclude `("/tmp/" "/ssh:" ,(concat user-emacs-directory "lib/.*-autoloads\\.el\\'")))
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (with-idle-delay 4
     (recentf-mode))
  )
#+end_src
** 自动换行
#+begin_src elisp
(setq-default fill-column 100)
(setq word-wrap t)
(setq word-wrap-by-category t)
#+end_src
** long-line
#+begin_src elisp
(setq-default bidi-display-reordering nil)
(setq bidi-inhibit-bpa t
      long-line-threshold 1000
      large-hscroll-threshold 1000
      syntax-wholeline-max 1000)
#+end_src
** TRAMP
#+begin_src elisp
(setq tramp-default-method "ssh")
#+end_src
** Automatically clean whitespace
#+begin_src elisp
(setup ws-butler
  (:hook-into text-mode prog-mode))
#+end_src
** vundo for undo history
#+name: vundo
#+begin_src elisp
(setup vundo
  (:bind "l" vundo-forward
         "h" vundo-backward
         "j" vundo-next
         "k" vundo-previous))
#+end_src
* Search
** isearch
#+begin_src elisp
(setup isearch
  (setq isearch-lazy-count t
        ;; lazy-highlight-cleanup nil
        )
  (:bind [remap isearch-delete-char] isearch-del-char)
  (:when-loaded
    (defvar isearch-repeat-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "s") #'isearch-repeat-forward)
        (define-key map (kbd "r") #'isearch-repeat-backward)
        map))
    (dolist (cmd '(isearch-repeat-forward isearch-repeat-backward))
      (put cmd 'repeat-map 'isearch-repeat-map))

    ))
#+end_src
** Consult Commands
*** consult
#+name: consult
#+begin_src elisp
(setup consult
  (:global "C-x b" consult-buffer)
  (setq register-preview-delay 0.1
           register-preview-function #'consult-register-format
           xref-show-xrefs-function #'consult-xref
           xref-show-definitions-function #'consult-xref
           consult-project-root-function #'(lambda ()
                                           (when-let (project (project-current))
                                             (car (project-roots project)))))
  (:with-map minibuffer-local-map
    (:bind "C-r" consult-history)))
#+end_src
*** search other cwd
#+begin_src elisp
(defun lewis/ripgrep-search-other-dir()
  (interactive)
  (let ((current-prefix-arg '(-1)))
    (call-interactively 'consult-ripgrep)))

(defun lewis/ripgrep-search-notes()
  (interactive)
  (consult-ripgrep (concat nowis-doc-emacs-dir "01-orgmode")))

(defun lewis/find-file-other-dir()
  (interactive)
  (let ((current-prefix-arg '(-1)))
    (call-interactively 'consult-fd)))
#+end_src
** rg.el
#+begin_src elisp
(setup rg)
#+end_src
* 补全
** Completions with Vertico
#+name: vertico
#+begin_src elisp
(setq vertico-cycle t)
(setup vertico
  (:with-map vertico-map
    (:bind [backspace] vertico-directory-delete-char))
  (vertico-mode))
#+end_src
** Orderless and pinyinlib
#+begin_src elisp
(setup orderless
  (setq completion-styles '(orderless basic)
           completion-category-defaults nil
           completion-category-overrides '((file (styles partial-completion)))
           completion-pcm-leading-wildcard t
           )
  (:when-loaded
    (require 'pinyinlib)
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
    ))
#+end_src
** Marginalia
#+begin_src elisp
(setup marginalia
  (:hook-into after-init))
#+end_src
** embark
should be check after reading the embark.el manual
#+begin_src elisp
(setup embark-consult
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

(setup embark
  (:also-load embark-consult)
  (:autoload embark-toggle-highlight)
  (setq prefix-help-command #'embark-prefix-help-command)
  (:global "C-S-a" embark-act))

(setup wgrep)
#+end_src
** yasnippet
#+begin_src elisp
(setup yasnippet
  (:global "M-*" yas-insert-snippet)
  (setq yas-snippet-dirs (list (concat nowis-config-useful-tools "snippets")))
  (yas-global-mode)
  )
#+end_src
* Window Management
** window
#+begin_src elisp
(setup window
  (setq quit-restore-window-no-switch t)
  )
#+end_src
** winner-mode
#+name: winner-mode
#+begin_src elisp
(setup winner
  (winner-mode t)
  )
#+end_src
** popper
Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm’s reach.
#+begin_src elisp
(setup popper
  (setq popper-reference-buffers '("\\*Messages\\*"
                                   "Output\\*$"
                                   "\\*Async Shell Command\\*"
                                   "\\*Org Clock Reminder\\*"
                                   "gt-result"
                                   help-mode
                                   helpful-mode
                                   compilation-mode
                                   youdao-dictionary-mode)
        popper-window-height 0.33
        )
  (:global "M-~" popper-toggle
           "C-M-`" popper-toggle-type
           )
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src
** Move
*** avy
Jump anywhere in the world
#+begin_src elisp
(setup avy
  (:global "M-j" avy-goto-char-timer)
  ;; (setq avy-keys (number-sequence ?1 ?9))
  (:when-loaded
  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)

  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
  (define-key isearch-mode-map (kbd "M-j") 'avy-isearch)
  ))
#+end_src
*** bookmark
#+begin_src elisp
(setq bookmark-default-file (concat nowis-doc-emacs-dir "bookmarks"))
#+end_src
*** windmove
#+begin_src elisp
(setup windmove
  (transient-define-prefix windmove-transient-keybindings()
    "Define windmove maps"
    [[("h" "left" windmove-left :transient t)
      ("H" "swap-left" windmove-swap-states-left :transient t)]
     [("j" "down" windmove-down :transient t)
      ("J" "swap-down" windmove-swap-states-down :transient t)]
     [("k" "up" windmove-up :transient t)
      ("K" "swap-up" windmove-swap-states-up :transient t)]
     [("l" "right" windmove-right :transient t)
      ("L" "swap-right" windmove-swap-states-right :transient t)]
     ])
  (:global "C-x O" #'windmove-transient-keybindings)
  )

#+end_src
*** ace-window
#+begin_src elisp
(setup ace-window
  (:global "M-o" ace-window))
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
      aw-scope 'frame
      )
#+end_src
* ibuffer
** ibuffer
#+name: ibuffer
#+begin_src elisp
(setup ibuffer
  (:global [remap list-buffers] #'ibuffer))
#+end_src
* Input
** posframe
#+begin_src elisp
(setup posframe)
#+end_src
** rime
#+begin_src elisp
(setq default-input-method "rime")
(with-eval-after-load 'rime
  (defun my/rime-disable-predicates ()
    (if (derived-mode-p 'eat-mode)
        ;; 只在 eat buffer 下，禁用 predicates 约束，rime 全时可用
        '(meow-normal-mode-p
          meow-motion-mode-p
          meow-keypad-mode-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-current-input-punctuation-p
          rime-predicate-current-uppercase-letter-p
          rime-predicate-space-after-cc-p
          )
      ;; 其他 buffer 用你原来的 predicate 约束
      '(meow-normal-mode-p
        meow-motion-mode-p
        meow-keypad-mode-p
        rime-predicate-prog-in-code-p
        rime-predicate-punctuation-line-begin-p ;;在行首要输入符号时
        rime-predicate-after-alphabet-char-p ;;在英文字符串之后（必须为以字母开头的英文字符串）
        rime-predicate-current-input-punctuation-p ;;当要输入的是符号时
        ;; rime-predicate-after-ascii-char-p ;;任意英文字符后 ,enable this to use with <s
        rime-predicate-current-uppercase-letter-p ;; 将要输入的为大写字母时
        rime-predicate-space-after-cc-p ;;在中文字符且有空格之后
        )))
  (add-hook 'rime-mode-hook
            (lambda ()
              (setq-local rime-disable-predicates
                          (funcall #'my/rime-disable-predicates))))

  (setq rime-show-candidate 'posframe
        rime-posframe-properties (list :internal-border-width 1
                                       :font lewis-fixed-font
                                       )
        rime-user-data-dir "~/Documents/rime/"
        rime-share-data-dir "~/Documents/rime/"
        rime-inline-ascii-trigger 'shift-r
        ))
(when (eq system-type 'darwin)
  (setq
   ;; rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/" ;; use build-emacs
   rime-emacs-module-header-root "/opt/homebrew/opt/emacs-plus@31/include" ;;use emacs-plus
   rime-librime-root "~/Downloads/librime/dist"
   ))
#+end_src
* File and Browsing
** file browsing
*** dired
#+begin_src elisp
(setup dired
  (setq dired-dwim-target t)
  (:hook dired-hide-details-mode
         ;; dired-omit-mode
         ))
#+end_src
*** nerd-icons-dired
#+begin_src elisp
(setup nerd-icons-dired)
(add-hook 'dired-mode-hook #'nerd-icons-dired-mode)
#+end_src
*** dired-hacks
#+begin_src elisp
(setup dired
  (:with-map dired-mode-map
    (:bind "TAB" #'dired-subtree-toggle))
  )
;; TODO if want to use dired-images, you should install eimp
#+end_src
*** dired-sidebar
#+begin_src elisp
(setup dired-sidebar)
#+end_src
** structure browsing
*** imenu-list
#+begin_src elisp
(setup imenu-list
  (:autoload himenu-list-smart-toggle)
  (setq imenu-list-focus-after-activation nil
           imenu-list-auto-resize t
           imenu-list-position 'left
           imenu-list-auto-update t
           )
  )
#+end_src
** tab-line and tab-bar
#+begin_src elisp
(setup tab-bar
  (setq tab-bar-new-button-show nil
        tab-bar-close-button-show nil)
  (:when-loaded
    (defun tab-bar-select-tab-1st()
      (interactive)
      (tab-bar-select-tab 1))
    (defun tab-bar-select-tab-2nd()
      (interactive)
      (tab-bar-select-tab 2))
    (defun tab-bar-select-tab-3rd()
      (interactive)
      (tab-bar-select-tab 3))
    (defun tab-bar-select-tab-4th()
      (interactive)
      (tab-bar-select-tab 4))
    (defun tab-bar-select-tab-5th()
      (interactive)
      (tab-bar-select-tab 5))
    (defun tab-bar-select-tab-6th()
      (interactive)
      (tab-bar-select-tab 6))
    )
  )
(setup tab-line
  (setq tab-line-new-button-show nil
           tab-line-close-button-show nil)
  ;; (:defer (global-tab-line-mode))
  )
#+end_src
** tabspaces
#+begin_src elisp
(setup tabspaces
  (setq tabspaces-use-filtered-buffers-as-default t
        tabspaces-keymap-prefix nil)
(with-idle-delay 4
   (tabspaces-mode))
  (:when-loaded
    (transient-define-prefix tabspaces-leader-map()
      "Define tabspaces leader-key maps"
      [["Create or close"
        ("s" "tabspaces-switch-or-create-workspace" tabspaces-switch-or-create-workspace)
        ("b" "tabspaces-switch-to-buffer" tabspaces-switch-to-buffer)
        ("d" "tabspaces-close-workspace" tabspaces-close-workspace)
        ("k" "tabspaces-remove-selected-buffer" tabspaces-remove-selected-buffer)
        ("K" "tabspaces-kill-buffers-close-workspace" tabspaces-kill-buffers-close-workspace)
        ("o" "tabspaces-open-or-create-project-and-workspace" tabspaces-open-or-create-project-and-workspace)
        ("R" "tabspaces-remove-selected-buffer" tabspaces-remove-selected-buffer)
        ("r" "tab-bar-rename-tab-by-name" tab-bar-rename-tab-by-name)
        ("t" "tabspaces-switch-buffer-and-tab" tabspaces-switch-buffer-and-tab)
        ]
       ["Switch tab bar"
        ("n" "tab-bar-switch-to-next-tab" tab-bar-switch-to-next-tab)
        ("p" "tab-bar-switch-to-prev-tab" tab-bar-switch-to-prev-tab)
        ("l" "tab-bar-switch-to-last-tab" tab-bar-switch-to-last-tab)
        ]
       ["Switch tab bar by index"
        ("1" "tab-bar-select-tab-1st" tab-bar-select-tab-1st)
        ("2" "tab-bar-select-tab-2nd" tab-bar-select-tab-2nd)
        ("3" "tab-bar-select-tab-3rd" tab-bar-select-tab-3rd)
        ("4" "tab-bar-select-tab-4th" tab-bar-select-tab-4th)
        ("5" "tab-bar-select-tab-5th" tab-bar-select-tab-5th)
        ("6" "tab-bar-select-tab-6th" tab-bar-select-tab-6th)
        ]
       ]
      )
    )
  )
#+end_src
** project
#+begin_src elisp
(setup project
  (:when-loaded
    (add-to-list 'project-find-functions #'project-rootfile-try-detect)
    )
  )
#+end_src
** project-rootfile
#+begin_src elisp
(setup project-rootfile
  (setq project-rootfile-list '(".project"))
  )
#+end_src
** auto-insert
#+begin_src elisp
(setup autoinsert
  (setq auto-insert-query t)
  ;; (:defer
  ;;  (auto-insert-mode t))
  )
#+end_src
** midnight
#+begin_src elisp
(setup midnight)
(setq clean-buffer-list-delay-general 1)
#+end_src
* shell
** eshell
#+begin_src elisp
(setup eshell)
#+end_src
** eat
#+begin_src elisp
(defun meomacs-eat-meow-setup()
  (add-hook 'meow-normal-mode-hook 'eat-emacs-mode nil t)
  (add-hook 'meow-insert-mode-hook 'eat-semi-char-mode nil t))
(with-eval-after-load "meow"
  (with-eval-after-load "eat"
    (keymap-set eat-char-mode-map "C-S-v" 'eat-yank)
    ;; (advice-add 'eat-semi-char-mode :after 'eat-emacs-mode)
    (add-hook 'eat-mode-hook 'meomacs-eat-meow-setup)
    ))
(setup eat
  ;; fix char error on macos
  (when (eq system-type 'darwin)
    (setq eat-term-name "xterm-256color"))
  (:global "M-`" eat-toggle-window)
  (:when-loaded
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'eat-mode)
                             (string-prefix-p "*eat" (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3)))
    ;; use M-o for ace-window
    (progn
      (add-to-list 'eat-semi-char-non-bound-keys [?\e ?o])
      (eat-update-semi-char-mode-map))
    )
  (defun eat-toggle-window()
    "Toggle eshell buffer."
    (interactive)
    (if (get-buffer-window "*eat*")
        (delete-window (get-buffer-window "*eat*"))
      (progn
        (if (not (featurep 'eat))
            (progn
              (require 'eat)
              (eat-reload)))
        (eat)
        (eat-cycle)
        ))
    )

  (defvar eat-cycle-keys '("M-1" "M-2" "M-3" "M-4" "M-5" "M-6" "M-7" "M-8" "M-9"))
  (defvar eat-cycle-persist t)
  (defvar eat-cycle--registry (make-hash-table :test 'equal))

  (defun eat-cycle--get-buffers ()
    (sort (seq-filter (lambda (b) (eq 'eat-mode (buffer-local-value 'major-mode b)))
                      (buffer-list))
          (lambda (a b) (string< (buffer-name a) (buffer-name b)))))

  (defun eat-cycle--assign-slots (buffers)
    (let ((slots (make-vector (length eat-cycle-keys) nil))
          (live-names (mapcar #'buffer-name buffers)))

      ;; Clean dead buffers from registry
      (maphash (lambda (name slot)
                 (unless (member name live-names)
                   (remhash name eat-cycle--registry)))
               eat-cycle--registry)

      ;; Assign existing slots
      (dolist (buf buffers)
        (when-let ((slot (gethash (buffer-name buf) eat-cycle--registry)))
          (when (< slot (length slots))
            (aset slots slot buf))))

      ;; Assign new buffers to free slots
      (let ((next-slot 0))
        (dolist (buf buffers)
          (unless (gethash (buffer-name buf) eat-cycle--registry)
            (while (and (< next-slot (length slots)) (aref slots next-slot))
              (setq next-slot (1+ next-slot)))
            (when (< next-slot (length slots))
              (puthash (buffer-name buf) next-slot eat-cycle--registry)
              (aset slots next-slot buf)
              (setq next-slot (1+ next-slot))))))

      ;; Return non-nil slots
      (cl-loop for buf across slots
               for i from 0
               when buf collect (cons i buf))))

;;;###autoload
  (defun eat-cycle ()
    (interactive)
    (let* ((buffers (eat-cycle--get-buffers))
           (slots (eat-cycle--assign-slots buffers)))
      (cond
       ((null buffers) (message "No eat buffers"))
       ((= 1 (length buffers)) (switch-to-buffer (car buffers)))
       (t (let ((current (current-buffer)))
            (unless (memq current buffers)
              (switch-to-buffer (cdar slots))
              (setq current (cdar slots)))
            ;; Show message
            (message "Eat: %s"
                     (mapconcat (lambda (slot)
                                  (format "%s[%d:%s]"
                                          (if (eq (cdr slot) current) "*" "")
                                          (1+ (car slot))
                                          (buffer-name (cdr slot))))
                                slots " "))
            ;; Set keymap
            (set-transient-map
             (let ((map (make-sparse-keymap)))
               (dolist (slot slots)
                 (define-key map (kbd (nth (car slot) eat-cycle-keys))
                             (lambda () (interactive)
                               (switch-to-buffer (cdr slot))
                               (when eat-cycle-persist (eat-cycle)))))
               map)))))))
  )
#+end_src
* git
** magit
#+begin_src elisp
(setup with-editor)
(setup llama)
(setup cond-let)
(setup magit)
#+end_src
** ediff
#+begin_src elisp
(setup ediff
  (setq ediff-split-window-function 'split-window-horizontally
           ediff-window-setup-function 'ediff-setup-windows-plain)
  ;; restore windows Configuration after ediff
  (add-hook 'ediff-before-setup-hook #'ediff-save-window-conf)
  (add-hook 'ediff-quit-hook #'ediff-restore-window-conf)
  (:when-loaded
    (defvar local-ediff-saved-window-conf nil)
    (defun ediff-save-window-conf ()
      (setq local-ediff-saved-window-conf (current-window-configuration)))
    (defun ediff-restore-window-conf ()
      (when (window-configuration-p local-ediff-saved-window-conf)
        (set-window-configuration local-ediff-saved-window-conf)))
    ))
#+end_src
* Program
** Language
*** elisp
#+begin_src elisp
(setq elisp-fontify-semantically t)
#+end_src
**** helpful
#+begin_src elisp
(setup elisp-refs)
(setup helpful
  (:global "C-h f" #'helpful-callable
           "C-h v" #'helpful-variable
           "C-h k" #'helpful-key
           "C-c C-d" #'helpful-at-point
           "C-h F" #'helpful-function
           "C-h C" #'helpful-command))
#+end_src
**** elisp-demos
#+begin_src elisp
(setup elisp-demos
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
*** graphviz-dot-mode
#+begin_src elisp
(setup graphviz-dot-mode
  (:file-match "\\.dot\\'")
  (setq graphviz-dot-indent-width 4)
  (setq nowis-graphviz-current-num 0)
  (defun nowis-graphviz-symbol-with-label ()
    "Wrap the current symbol with [label=\"symbol\"]."
    (interactive)
    (let ((symbol (thing-at-point 'symbol)))
      (when symbol
        (delete-region (beginning-of-thing 'symbol) (end-of-thing 'symbol))
        (insert (format "%s [label=\"%s\"]" nowis-graphviz-current-num symbol))
        (setq nowis-graphviz-current-num (1+ nowis-graphviz-current-num))
        )))
  (defun nowis-graphviz-reset-number ()
    "Reset number to 0"
    (interactive)
    (setq nowis-graphviz-current-num 0))
    )
#+end_src
*** plantuml
This Emacs tool use plantuml to generate images for org, json, yaml files.
#+begin_src elisp
;; download plantuml jar
(setq plantuml-jar-path (concat no-littering-var-directory "plantuml.jar"))
(defun plantuml-download-jar ()
  "Download the latest PlantUML JAR file and install it into `plantuml-jar-path'."
  (interactive)
  (if (y-or-n-p (format "Download the latest PlantUML JAR file into %s? " plantuml-jar-path))
      (if (or (not (file-exists-p plantuml-jar-path))
              (y-or-n-p (format "The PlantUML jar file already exists at %s, overwrite? " plantuml-jar-path)))
          (with-current-buffer (url-retrieve-synchronously "https://search.maven.org/solrsearch/select?q=g:net.sourceforge.plantuml+AND+a:plantuml&core=gav&start=0&rows=1&wt=xml")
            (mkdir (file-name-directory plantuml-jar-path) t)
            (let* ((parse-tree (xml-parse-region))
                   (doc        (->> parse-tree
                                    (assq 'response)
                                    (assq 'result)
                                    (assq 'doc)))
                   (strs       (xml-get-children doc 'str))
                   (version    (->> strs
                                    (--filter (string-equal "v" (xml-get-attribute it 'name)))
                                    (car)
                                    (xml-node-children)
                                    (car))))
              (message (concat "Downloading PlantUML v" version " into " plantuml-jar-path))
              (url-copy-file (format "https://search.maven.org/remotecontent?filepath=net/sourceforge/plantuml/plantuml/%s/plantuml-%s.jar" version version) plantuml-jar-path t)
              (kill-buffer)))
        (message "Aborted."))
    (message "Aborted.")))
#+end_src
*** beancount
Emacs major-mode to work with Beancount ledger files
#+begin_src elisp
(setup beancount
  (:file-match "\\.beancount\\'"))
#+end_src
*** latex
**** basic
#+begin_src elisp
;;  (setup auctex)
(setup cdlatex)
#+end_src
**** org-elp
#+begin_src elisp
(setup org-elp
  (setq org-elp-idle-time 1))
#+end_src
*** python
**** python
#+begin_src elisp
(setup python
  (:with-hook inferior-python-mode-hook
    (:hook (lambda ()
             (process-query-on-exit-flag
              (get-process "Python")))))
  (:when-loaded
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))
    ))
#+end_src
*** scheme
#+begin_src elisp
(setup geiser)
(setup geiser-guile)
#+end_src
*** common lisp slime
#+begin_src elisp :tangle no
(setup slime
  (setq inferior-lisp-program "sbcl"))
#+end_src
*** cc-mode
#+begin_src emacs-lisp
(setup cc-mode
  (setq c-basic-offset 4))

(setup hideif
  (setq hide-ifdef-shadow t
           hide-ifdef-initially t)
  (:with-feature hide-ifdef-mode
    (:hook-into c-mode c++-mode)))
#+end_src
*** lua-mode
#+begin_src elisp
(setup lua-mode)
#+end_src
*** cmake-mode
#+begin_src elisp
(setup cmake-mode)
#+end_src
*** csv-mode
#+begin_src elisp
(setup csv-mode)
#+end_src
** Useful programing tools
*** xref related
**** xref
#+begin_src elisp
(setup xref
  (setq xref-search-program (cond
                             ((executable-find "rg") 'ripgrep)
                             (t 'grep))
        xref-history-storage #'xref-window-local-history)
  (:autoload xref-push-marker-stack)) ;; autoload this command for jump-back
#+end_src
**** xref jump back
borrowed from citre, now you can always jump-back use "M-," after any jump in the list.
#+begin_src elisp
(defun my--push-point-to-xref-marker-stack (&rest r)
  (xref-push-marker-stack (point-marker))) ;; must autoload this command in xref
(dolist (func '(find-function
                consult-imenu
                consult-ripgrep
                consult-line
                consult-find
                find-file
                blink-search
                citre-jump
                consult-goto-line
                isearch-forward))
  (if (fboundp func)
      (advice-add func :before 'my--push-point-to-xref-marker-stack)))
#+end_src
*** UI
**** electric-pair
#+begin_src elisp
(setup elec-pair
  (electric-pair-mode))
#+end_src
**** indent-bars
#+begin_src elisp
(setup indent-bars
  (:hook-into prog-mode)
  )
#+end_src
*** treesit tools
**** treesit
#+begin_src elisp
(setup treesit
  (setq treesit-font-lock-level 4))
#+end_src
**** treesit-auto
#+begin_src elisp
(setup treesit-auto
  (setq treesit-auto-install t
        treesit-auto-langs '(python c cpp json org verilog cmake bash vhdl lua))
   (if (treesit-available-p)
       (require 'treesit-auto))
  (:when-loaded
    (global-treesit-auto-mode)
    )
  )
#+end_src
*** Complete
**** corfu related
***** corfu
#+begin_src elisp
(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer."
  (when (local-variable-p 'completion-at-point-functions)
    ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

(setup corfu
  (setq corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
        corfu-auto t                 ;; Enable auto completion
        corfu-quit-no-match t        ;; Automatically quit if there is no match
        corfu-preview-current nil    ;; Disable current candidate preview
        corfu-auto-prefix 1
        corfu-auto-delay 0.05
        corfu-scroll-margin 5
        )        ;; Use scroll margin
  (:with-map corfu-map
    (:bind "<escape>" my-corfu-quit
           "C-SPC" corfu-insert-separator
           ))

  (defun my-corfu-quit()
    "when in corfu-map, quit corfu-selection and return to meow normal mode"
    (interactive)
    (corfu-quit)
    (meow-insert-exit))

  (global-corfu-mode)
  ;; (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  )
(setup corfu-popupinfo
  (:load-after corfu)
  (setq corfu-popupinfo-delay '(0.5 . 0.5))
  (:when-loaded
    (corfu-popupinfo-mode)))

(setup cape
  ;; don't let dabbrev take over all things
  (defalias 'cape-dabbrev-min-2 (cape-capf-prefix-length #'cape-dabbrev 2))
  ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev-min-2)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-file)
  )

#+end_src
***** ispell
#+begin_src elisp
(setup ispell
  (:when-loaded
    ;; if not find ispell-dict, use cape as default
    (if (null ispell-alternate-dictionary)
        (progn
          (setq ispell-complete-word-dict (concat nowis-doc-emacs-dir "02-binary-git/binary-files/12-spell-dict/en_US.dict"))))))
#+end_src
***** nerd-icons-corfu
#+begin_src elisp
(setup nerd-icons-corfu
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
**** lsp mode
***** eglot
#+begin_src elisp
(setup project)
(setq read-process-output-max (* 1024 1024))
(setup eglot
  (setq eglot-events-buffer-config'(:size 20000 :format full)
        eglot-extend-to-xref t
        ;; eglot-workspace-configuration '((:python.analysis :useLibraryCodeForTypes t))
        eglot-workspace-configuration '(:basedpyright (:typeCheckingMode "off")
                                                      :basedpyright.analysis (:diagnosticSeverityOverrides (:reportUnusedCallResult "none")
                                                                                                           :inlayHints (:callArgumentNames :json-false)
                                                                                                           ))
        )
  (:autoload eglot-find-implementation)
  (add-hook 'prog-mode-hook (lambda ()
                              (unless
                                  (or (file-remote-p default-directory)
                                      (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
                                      (eglot-ensure)))))
  ;; (add-hook 'text-mode-hook (lambda() (eglot-ensure)))

  (:when-loaded
    ;; hightlight face
    (defface new-hi-green
      '((((min-colors 88) (background dark))
         (:background "light green" :foreground "black"))
        (((background dark)) (:background "green" :foreground "black"))
        (((min-colors 88)) (:background "light green"))
        (t (:background "green")))
      "Face for hi-lock mode.")
    (set-face-attribute 'eglot-highlight-symbol-face nil :inherit 'new-hi-green)
    ;; more languare server
    (add-to-list 'eglot-server-programs
                 '(graphviz-dot-mode . ("dot-language-server" "--stdio")))
    ;; (add-to-list 'eglot-server-programs
    ;;              '(text-mode . ("harper-ls" "--stdio")))
    )
  )
(setup eldoc
  (setq eldoc-echo-area-use-multiline-p nil
        eldoc-echo-area-display-truncation-message t))
;; (setq eldoc-echo-area-prefer-doc-buffer nil)
#+end_src
***** eglot in org-src
#+begin_src elisp
(with-eval-after-load 'org
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         ;;;;;;;;;;;; always use temp file
         (defun ,intern-pre (info)
           (let ((file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (eglot-ensure)))

         ;; (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("python" "C++" "C" "c" "cpp" "dot"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang)))
  )
#+end_src
**** citre
Citre is an advanced Ctags (or actually, readtags) frontend for Emacs.
#+begin_src elisp
(setup citre
  (add-hook 'prog-mode (lambda()
                         (require 'citre-config)
                         ))
  (setq citre-use-project-root-when-creating-tags t
        citre-prompt-language-for-ctags-command t
        ;; citre-auto-enable-citre-mode-modes '(prog-mode)
        )
  )
#+end_src
*** spell-check
**** jinx
#+begin_src elisp
(setup jinx
  (dolist (hook '(text-mode-hook conf-mode-hook))
    (add-hook hook #'jinx-mode))
  (:when-loaded
    (setq jinx-languages "en_US")
    (add-to-list 'jinx-exclude-regexps '(t "\\cc"))
    (keymap-global-set "M-$" #'jinx-correct)
    (keymap-global-set "C-M-$" #'jinx-languages)))
#+end_src
*** debug
**** gdb
#+begin_src elisp
(setup gdb-mi
  (setq gdb-restore-window-configuration-after-quit t)
  )
#+end_src
**** dape
#+begin_src elisp
(setup dape
  (setq dape-buffer-window-arrangment 'right)
  (:global "<f5>"  dape)
  (:when-loaded
    (add-hook 'dape-repl-mode-hook (lambda()
                                     (corfu-mode -1)
                                     )
  )))
#+end_src
**** edebug
#+begin_src lisp
(setup edebug
  (:with-map edebug-mode-map
    (:bind "n" edebug-step-mode
           "N" edebug-next-mode
  )))
#+end_src
*** Code toggle with hideshow, hideif
#+begin_src elisp
(setup hideshow
  (:with-hook prog-mode-hook
    (:hook hs-minor-mode))
  (add-to-list 'hs-special-modes-alist '(verilog-mode "\\(\\<begin\\>\\|\\<case\\>\\|\\<module\\>\\|\\<class\\>\\|\\<function\\>\\|\\<task\\>\\)"
                                                      )))
#+end_src
*** format-all
#+begin_src elisp
(setup inheritenv)
(setup language-id)
(setup format-all)
#+end_src
*** compile
#+begin_src elisp
(setup compile
  (setq compile-command "cd build && make && ./test"))
#+end_src
* Org Mode
** org-mode
#+begin_src elisp
(setup engrave-faces) ;; for code highlight when exporting pdfs
(setup org
  (setq org-adapt-indentation nil
        org-startup-indented t
        org-startup-with-inline-images nil
        org-startup-numerated nil
        org-startup-folded nil
        org-hide-block-startup t
        org-imenu-depth 8
        org-return-follows-link t
        org-id-link-to-org-use-id t ;; Create an ID if needed to make a link to the current entry.

        org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                               (vm-imap . vm-visit-imap-folder-other-frame)
                               (gnus . org-gnus-no-new-news)
                               (file . find-file)
                               (wl . wl-other-frame))
        ;; org-blank-before-new-entry '((heading . t)
        ;;                              (plain-list-item . auto))

        org-image-actual-width 800 ;; this will use 600 for width for all the images.
        org-preview-latex-image-directory (concat no-littering-var-directory "ltximg/")
        org-plantuml-jar-path plantuml-jar-path
        org-special-ctrl-a/e t
        ;; org-id
        org-attach-id-dir (concat nowis-doc-emacs-dir "01-orgmode/org-attach")
        org-id-method 'ts
        org-id-ts-format "%Y%m%dT%H%M%S_%6N"

        ;; habit
        org-habit-following-days 2
        system-time-locale "C" ;; ensure time format is always english
        ;; todo keywords
        org-todo-keyword-faces '(("TODO"    :foreground "red"    :weight bold)
                                 ("NEXT"    :foreground "deep sky blue" :weight bold)
                                 ("WAIT"    :foreground "goldenrod"     :weight bold)
                                 ("SMDY"    :foreground "medium purple" :weight bold)
                                 ("DONE"    :foreground "forest green"  :weight bold)
                                 ("AXED"    :foreground "gray55"        :weight bold))
        ;; save state changes into logbook
        org-log-state-notes-into-drawer t
        ;; plain list
        org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+"))
        ;; attach
        org-yank-image-save-method (concat nowis-doc-emacs-dir "02-binary-git/binary-files/01-pictures/org_download_images")
        )
  (:when-loaded
    (require 'org-tempo) ;; so that <s is useful
    ))
#+end_src
** org-src
#+begin_src elisp
(setup org
  (setq org-edit-src-content-indentation 0
        org-confirm-babel-evaluate nil
        ;; org-src
        org-src-window-setup 'split-window-below)
  (:when-loaded
    ;; org-src-lang-modes
    (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
    ;; dynamic load org-src modules to accelerate speed
    (defun my/org-babel-execute-src-block (&optional _arg info _params)
      "Load language if needed"
      (let* ((lang (format "%s" (nth 0 info)))
             (sym (cond ((member (downcase lang) '("c" "cpp" "c++")) 'C)
                        ((member (downcase lang) '("jupyter-python")) 'jupyter)
                        (t (intern lang))))
             (backup-languages org-babel-load-languages))
        (unless (assoc sym backup-languages)
          (condition-case err
              (progn
                (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t)))
                (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages)))
            (file-missing
             (setq-default org-babel-load-languages backup-languages)
             err)))))
    (advice-add 'org-babel-execute-src-block :before #'my/org-babel-execute-src-block )
    ;; didn't redisplay for now
    ;; (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
    (defun nowis-open-generated-image ()
      "Open the image file generated by org-babel in a new window."
      (when (org-in-src-block-p)  ; Check if inside a code block
        (let* ((info (org-babel-get-src-block-info)))  ; Get code block info
          (when info
            (let ((file (cdr (assq :file (nth 2 info)))))  ; Extract the :file parameter value
              (when (and file (file-exists-p file))  ; Check if the file exists
                (let ((buffer (find-file-noselect file)))  ; Get the buffer for the image file
                  (display-buffer buffer '(display-buffer-pop-up-window))  ; Display the buffer in a new window
                  (with-current-buffer buffer
                    (image-mode)))))))))  ; Enable image mode for the buffer
      (add-hook 'org-babel-after-execute-hook 'nowis-open-generated-image)
      ))
#+end_src
** org-sidebar
#+begin_src elisp
(defun nowis-org-toggle-sidebar()
  "Toggle the display of the Org outline sidebar."
  (interactive)
  (let* ((sidebar-buffer-name (concat "*Outline: " (buffer-name) "*"))
         (window-width (/ (frame-width) 3))) ; Set width to one-third of the screen width
    ;; Check if the sidebar buffer exists
    (if (get-buffer sidebar-buffer-name)
        ;; If it exists, close the sidebar
        (progn
          (delete-window (get-buffer-window sidebar-buffer-name))
          (kill-buffer sidebar-buffer-name)
          (message "Outline sidebar closed!"))
      ;; If it doesn't exist, create and display the sidebar
      (let ((sidebar-buf (make-indirect-buffer (current-buffer) sidebar-buffer-name 'clone)))
        (with-current-buffer sidebar-buf
          (org-num-mode 1)       ; Enable heading numbers
          (org-cycle-content)         ; Fold all content, showing only headings
          (setq buffer-read-only t) ; Set to read-only to prevent accidental edits
          (setq truncate-lines t) ; Disable line wrapping
          (set-window-dedicated-p (get-buffer-window sidebar-buf) t)) ; Mark as a dedicated window
        ;; Display the sidebar on the left, with a width of one-third of the screen
        (display-buffer-in-side-window
         sidebar-buf
         `((side . left) (window-width . ,window-width)))
        (message "Outline sidebar displayed!")))))
#+end_src
** org-zotero-parser
#+begin_src elisp
(setup org
  (:when-loaded
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; for zotero annotations parser
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (defun org-zotero-open (path)
      (browse-url (format "zotero:%s" path)))
    (org-link-set-parameters "zotero" :follow #'org-zotero-open)

    (defun parser-zotero-annotation-to-org-mode()
      (interactive)
      (while (re-search-forward "“\\([.]*\n*.*\\)” (\\[\\(.*\\)\\](zotero://selec.*)) (.*(\\(zotero.*\\)))" nil t)
        (let ((begin (match-beginning 1))
              (end (match-end 3))
              (note (match-string 1))
              (title (match-string 2))
              (location (match-string 3))
              )
          (delete-region (1- begin) (+ 2 end)) ;; full region
          (insert (format "** %s\n%s" title note))
          (org-set-property "zotero" location)
          (org-set-property "ref" title)

          ;; for anki
          (org-set-tags "wait_for_cloze") ;; for article
          ;; (org-set-property "ANKI_DECK" "Default::2") ;; default with 0.9 mem rate
          ;; (org-set-property "ANKI_NOTE_TYPE" "Cloze")

          ;; for org-srs
          (if (not (featurep 'org-srs))
              (require 'org-srs))
          (org-srs-item-new-normal)
          )))
    )
  )
#+end_src
** org-ox,latex,word,markdown
#+begin_src elisp
(setup org
  ;; export without _ or ^
  (setq org-use-sub-superscripts nil)
  (setq org-export-with-sub-superscripts nil)
  (:when-loaded
    (with-eval-after-load 'ox-latex
      (setq org-latex-pdf-process '("tectonic %f")
            org-latex-default-class "scrbook"
            user-full-name "Lewis Liu"
            org-latex-default-table-environment "longtable"
            org-latex-listings 'engraved
            org-latex-image-default-option "max size={\\textwidth}{\\textheight}" ;; use adjustbox
            org-latex-image-default-width ""
            )
      ;; if you want to add svg support:
      ;;  1. install inkscape
      ;;  2. \usepackage[inkscapeversion=1]{svg}
      (add-to-list 'org-latex-classes
                   '("scrbook"
                     "\\documentclass[openany,oneside]{scrbook}
                      \\usepackage{ctex}
                      \\usepackage[export]{adjustbox}
                      \\usepackage{fancyhdr}
                      \\pagestyle{fancy}
                      \\fancyhead[L]{\\textsl{\\rightmark}}
                      \\fancyhead[R]{\\textsl{\\leftmark}}
                      \\renewcommand{\\footrulewidth}{0.4pt}"
                     ("\\part{%s}" . "\\part*{%s}")
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
      )

    ;; preview latex
    (add-to-list 'org-preview-latex-process-alist
	             '(tectonic :programs ("tectonic" "convert")
			                :description "pdf > png"
			                :message "you need install the programs: tectonic and imagemagick."
			                :image-input-type "pdf"
			                :image-output-type "png"
			                :image-size-adjust (1.0 . 1.0)
			                :latex-compiler
			                ("tectonic -Z shell-escape-cwd=%o --outfmt pdf --outdir %o %f")
			                :image-converter
			                ("convert -density %D -trim -antialias %f -quality 300 %O")))
    (setq org-preview-latex-default-process 'tectonic) ;; need to install tectonic and imagemagick


    (plist-put org-format-latex-options :scale 1.0) ;; use a large preview for latex
    ;; (setq org-preview-latex-default-process 'dvisvgm)
    ;; export and open word
    (add-to-list 'org-file-apps '("\\.docx\\'" . default))
    (add-to-list 'org-structure-template-alist
                 '("jp" . "src jupyter-python :async yes :kernel python3 :session py"))

    ;; borrowed from HM0880
    (defun lewis/convert-org-to-docx-with-pandoc ()
      "Use Pandoc to convert .org to .docx.
Comments:
- The `-N' flag numbers the headers lines.
- Use the `--from org' flag to have this function work on files
  that are in Org syntax but do not have a .org extension"
      (interactive)
      (shell-command
       (concat "pandoc -N --from org " (buffer-file-name)
               " -o "
               (file-name-sans-extension (buffer-file-name))
               ".docx"))
      (message "Convert finish: %s" docx-file))

    (defun lewis/convert-md-to-org (start end)
      "Convert region from markdown to org"
      (interactive "r")
      (shell-command-on-region start end "pandoc -f markdown -t org" t t)
      (org-mode))
    ))
#+end_src
** org-clock
#+begin_src elisp
(setup org-clock
  (setq org-clock-mode-line-entry 'current)
  (:when-loaded
    (defun my/org-show-reminder ()
      "Function to show a reminder buffer."
      (let ((buf (get-buffer-create "*Org Clock Reminder*"))
            (messages
             (list
              (propertize "Finished a time-box!" 'face '(:weight bold :height 1.5))
              (propertize "Take a break and think what's most important!" 'face '(:foreground "orange" :weight semi-bold))))
            )
        (with-current-buffer buf
          (erase-buffer)
          (insert (make-string (max 0 (/ (- (frame-height) 1) 6)) ?\n)) ;; whitespace line
          (dolist (message messages)
            (insert message "\n"))
          (center-region (point-min) (point-max))
          (goto-char (point-min))
          (display-buffer buf)
          )))

    (add-hook 'org-timer-set-hook #'org-clock-in)
    (add-hook 'org-timer-done-hook #'my/org-show-reminder)
    (add-hook 'org-timer-done-hook #'org-clock-out)
    ))
#+end_src
** org-timer
#+begin_src elisp
(setup org-timer
  (setq org-timer-default-timer 25))
#+end_src
** appt
#+begin_src elisp :tangle no
(setup appt
  (:load-after org)
  (:when-loaded
    (run-at-time nil 3600 'org-agenda-to-appt)
    ;; 更新agenda时，同步appt
    (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
    ;; 激活提醒
    (appt-activate 1)
    ))
#+end_src
** ui
*** org mode basic style
#+begin_src elisp
(setup org
  (setq org-auto-align-tags nil
        org-tags-column 0
        org-ellipsis " "
        org-hide-emphasis-markers t
        org-pretty-entities nil ;; can perfor ui such as "a_words" into small "awords"
        org-habit-graph-column 50
        ;; Agenda styling
        org-agenda-tags-column 0
        )
  (:when-loaded
    ;; emphasis
    (defface my-org-emphasis-bold
      '((default :inherit bold)
        (((class color) (min-colors 88) (background light))
         :foreground "pale violet red")
        (((class color) (min-colors 88) (background dark))
         :foreground "pale violet red"))
      "My bold emphasis for Org.")

    (defface my-org-emphasis-italic
      '((default :inherit italic)
        (((class color) (min-colors 88) (background light))
         :foreground "green3")
        (((class color) (min-colors 88) (background dark))
         :foreground "green3"))
      "My italic emphasis for Org.")

    (defface my-org-emphasis-underline
      '((default :inherit underline)
        (((class color) (min-colors 88) (background light))
         :foreground "#813e00")
        (((class color) (min-colors 88) (background dark))
         :foreground "#d0bc00"))
      "My underline emphasis for Org.")

    (setq org-emphasis-alist
          '(("*" my-org-emphasis-bold)
            ("/" my-org-emphasis-italic)
            ("_" underline)
            ("=" org-verbatim verbatim)
            ("~" org-code verbatim)
            ("+" (:strike-through t))
            ))
    ))
#+end_src
*** org beatury
#+begin_src elisp
(with-eval-after-load 'org
  (setq org-hide-leading-stars t)
  (let ((star-list '("󰯬" "󰯯" "󰯲" "󰯵" "󰯸" "󰯻" "󰯾" "󰰁" "󰰄" "󰰇" "󰰊")))
    (dotimes (i (length star-list))
      (font-lock-add-keywords
       'org-mode
       `((,(format "^\\(\\*\\{%d\\}\\) " (+ i 1)) ;; 只捕获星号
          (1 (prog1 nil   ;; 1 是第一个 group（星号）
               (compose-region (match-beginning 1) (match-end 1)
                               ,(nth i star-list))))))))
    ))
(add-hook 'org-mode-hook (lambda()
                           (setq prettify-symbols-alist
                                 '(("#+begin_src" . ?)
                                   ("#+end_src" . ?)
                                   ))
                           (prettify-symbols-mode)
                           ))
#+end_src
*** org-appear
#+begin_src elisp
(setup org-appear
  (:load-after org)
  (:hook-into org-mode))
#+end_src
*** org-visual-outline
#+begin_src elisp
(setup org-visual-outline
  (add-hook 'org-mode-hook #'org-visual-indent-mode))
#+end_src
** ox-hugo
#+begin_src elisp
(setup tomelr)
(setup ox-hugo
  (with-eval-after-load 'ox
  (require 'ox-hugo)))
#+end_src
** org-present
#+begin_src elisp
(setup org-present)
#+end_src
** bibtex related
*** bibtex
#+begin_src elisp
(setup bibtex
  (setq bibtex-autokey-year-length 4
           bibtex-autokey-titleword-separator "_"
           bibtex-autokey-name-year-separator "_"
           bibtex-autokey-year-title-separator "_"
           bibtex-autokey-titleword-length 15
           bibtex-autokey-titlewords 10
           bibtex-autokey-titleword-ignore ;; I took "On" out of this
           '("A" "An" "The" "Eine?" "Der" "Die" "Das")))

(defun do.refs/get-db-file-list ()
  "Get the list of all the bib files containing my bib database."
  (if (file-exists-p nowis-bib-dir)
      (directory-files-recursively nowis-bib-dir "\\.bib\\'" t)
    nil))
#+end_src
*** citar
#+begin_src elisp
(setup parsebib)
;; (setup citeproc) ;;<- (setup queue) (setup string-inflection)
(setup citar
  (setq org-cite-global-bibliography (do.refs/get-db-file-list)
           org-cite-insert-processor 'citar
           org-cite-follow-processor 'citar
           org-cite-activate-processor 'citar
           citar-library-paths (list nowis-bib-pdf-dir)
           citar-bibliography org-cite-global-bibliography
           ;; org-cite-export-processors '((t . (csl "modern-language-association.csl")))
           ))
#+end_src
*** citar-denote
#+begin_src elisp
(setup citar-denote
  (setq citar-denote-title-format "title")
  (with-eval-after-load 'citar
    (citar-denote-mode)
    )
  )
#+end_src
*** ebib
#+begin_src elisp
(setup ebib
  (setq ebib-preload-bib-files org-cite-global-bibliography
           ebib-file-search-dirs (list nowis-bib-pdf-dir)
           ebib-bib-search-dirs (list nowis-bib-dir)
           ebib-default-directory 'first-bib-dir
           ebib-file-associations '(("pdf")
                                    ("ps" . "gv")
                                    ("epub"))
           ebib-index-window-size 25
           ebib-index-columns '(("Score" 2 t)
                                ("Year" 6 t)
                                ("Author/Editor" 10 t)
                                ("Title" 80 t)
                                ("abstract" 10 t)
                                )
           ebib-reading-list-file (concat nowis-doc-emacs-dir "01-orgmode/xnotes/20230403T125743--ebib-reading-lists.org")
           ebib-use-timestamp t
           ebib-bibtex-dialect 'biblatex
           ebib-create-backups nil
           ))
#+end_src
** toc-org
#+begin_src elisp
(setup toc-org
  (:hook-into org-mode))
#+end_src
** denote and related
*** denote
#+begin_src elisp
(setup denote
  (setq denote-directory (expand-file-name (concat nowis-doc-emacs-dir "01-orgmode/xnotes"))
        ;; denote-dired-directories (ffap-all-subdirs denote-directory)
        denote-date-prompt-use-org-read-date t
        denote-modules '(project)
        denote-prompts '(title keywords signature template)
        denote-dired-directories-include-subdirectories t
        )
  ;; (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  (setq denote-templates
        `((essence . ,(concat "* 本质思考\n"
                              "** 事物的根本属性\n"
                              "** 问题的根源\n"
                              "** 现象背后的底层逻辑\n"
                              "* notes\n"))
          (action . ,(concat "* Destination\n\n"
                             "* Roadmap\n\n"
                             "* Action\n\n"
                             "* Warnings\n\n"
                             "* Links\n\n"))
          (gtd . ,(concat "* Important\n\n"
                          "* Diary\n\n"))
          ))
  )
#+end_src
*** denote-journal
#+begin_src elisp
(setup denote-journal
  (setq denote-journal-title-format "%Y_%m_%d_%a_%j")
  (add-hook 'calendar-mode-hook #'denote-journal-calendar-mode)
  (defun my/denote-journal-this-week-major-tasks ()
    "Open this week's Saturday journal and jump to or insert '本周重点任务' headline."
    (interactive)
    (let ((date (my/current-week-saturday)))
      (denote-journal-new-or-existing-entry date)
      (goto-char (point-min))
      (unless (re-search-forward "^\\*+ 本周重点任务" nil t)
        (goto-char (point-max))
        (unless (bolp) (insert "\n"))
        (insert "* 本周重点任务 :week:\n"))
      (org-show-entry)))
  )
#+end_src
*** denote-explorer
#+begin_src elisp
(setup denote-explore)
#+end_src
** find orgmode dir files
#+begin_src elisp
(defun project-find-searchable-dir-files ()
  (interactive)
  (dired (concat nowis-doc-emacs-dir "02-binary-git/binary-files/02-searchable"))
  (project-find-file t))
(defun project-find-gtd-dir-files ()
  (interactive)
  (dired nowis-gtd-dir)
  (project-find-file t))
#+end_src
** agenda/gtd
Borrowed from https://github.com/rougier/emacs-GTD

In short, you will need 3 files:
1. =index.org= for capture inbox TODOs
2. =agenda.org= for recurrent events
3. =action.org= for all tasks moving from inbox
4. (Option) =incubate.org= for incubate ideas
*** file
#+begin_src elisp
;; Files
(setq org-directory "~/Documents/emacs/01-orgmode/xnotes")

(setup org
  (:when-loaded
    (defun org-agenda-update-agenda-files ()
      "Update agenda file list together with refile list."
      (interactive)
      (let* ((gtd-dir (concat org-directory "/gtd"))
             (gtd-files (when (file-exists-p gtd-dir)
                          (directory-files-recursively gtd-dir "\\.org$")))
             )
        (setq org-agenda-files gtd-files)

      (setq org-refile-files
            (cl-remove-if (lambda (file) (string-match-p "inbox.org$" file))
                          org-agenda-files))))
    (org-agenda-update-agenda-files)
    ))

#+end_src
*** todos
#+begin_src elisp
(setq org-enforce-todo-dependencies t
      org-enforce-todo-checkbox-dependencies t
      )
(setq org-log-done 'note)
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "SMDY(s)" "|" "AXED(a)" "DONE(d)")))

(defun log-todo-next-creation-date (&rest ignore)
  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
(add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
(setq org-priority-lowest 69) ;; E
(setq org-priority-default 68) ;; D

#+end_src
*** capture
#+begin_src elisp
;; Use full window for org-capture
;; (add-hook 'org-capture-mode-hook 'delete-other-windows)
(setup org
  (:when-loaded
    (setq org-capture-templates
          `(("i" "Inbox" entry  (file+olp+datetree "gtd/inbox.org")
             ,(concat "* TODO %?\n"
                      "/Entered on/ %U"))
            ("d" "Done without clock" entry (file+olp+datetree "gtd/inbox.org")
             ,(concat "* DONE %?\n"
                      "CLOSED: %U\n"
                      ":LOGBOOK:\n"
                      "CLOCK: [%<%Y-%m-%d %a %H:%M>]--[%<%Y-%m-%d %a %H:%M>] =>  \n"
                      ":END:"))
            ("D" "Done with clock" entry  (file+olp+datetree "gtd/inbox.org")
             ,(concat "* DONE %?\n"
                      "CLOSED: %U"))
            ("m" "Meeting" entry  (file+headline "agenda.org" "Future")
             ,(concat "* %? :meeting:\n"
                      "<%<%Y-%m-%d %a %H:00>>"))
            ("n" "Note" entry  (file "notes.org")
             ,(concat "* Note (%a)\n"
                      "/Entered on/ %U\n" "\n" "%?"))
            ("@" "Inbox [mu4e]" entry (file "inbox.org")
             ,(concat "* TODO Reply to \"%a\" %?\n"
                      "/Entered on/ %U")))))
  )
#+end_src
*** refile
#+begin_src elisp
(setup org
  (:when-loaded
    (setq org-refile-use-outline-path 'full-file-path)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets '((org-refile-files :regexp . "*")))
    ;; '(("action.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
    ;;   ("incubate.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
    ;; Save the corresponding buffers
    (defun gtd-save-org-buffers ()
      "Save `org-agenda-files' buffers without user confirmation.
See also `org-save-all-org-buffers'"
      (interactive)
      (message "Saving org-agenda-files buffers...")
      (save-some-buffers t (lambda ()
                             (when (member (buffer-file-name) org-agenda-files)
                               t)))
      (message "Saving org-agenda-files buffers... done"))

    ;; Add it after refile
    (advice-add 'org-refile :after
                (lambda (&rest _)
                  (gtd-save-org-buffers)))

    ))
#+end_src
*** agenda
#+begin_src elisp
(defun org-get-parent-heading ()
  (save-excursion
    (when (org-up-heading-safe)
      (let ((parent (org-get-heading 'no-tags 'no-todo 'no-priority 'no-comment)))
        (truncate-string-to-width parent 16 nil ?\s)))))
(defun nowis-align-to-window-center(text)
  (let* ((title text)
         (width (window-width (get-buffer-window)))
         (pad (/ (1+ (- width (string-width title))) 2)))
    (concat (make-string (max 0 pad) ? ) title)))
(defmacro nowis-create-agenda-command (key description tag)
  `(list ,key ,description
         '(
           (tags-todo ,(concat "+week" tag)
                      ((org-agenda-overriding-header
                        (nowis-align-to-window-center "󰛨 Week's Target 󰛨\n"))
                       (org-agenda-sorting-strategy '(todo-state-up priority-down timestamp-up))
                       (org-agenda-prefix-format "%-16:(org-get-parent-heading): [%-4e] ")))
           (agenda ""
                   ((org-agenda-overriding-header (nowis-align-to-window-center " Today's Target "))
                    (org-agenda-span 'day)
                    (org-agenda-skip-function
                     '(org-agenda-skip-if nil '(todo done)))))
           (tags-todo "+TODO=\"NEXT\""
                      ((org-agenda-overriding-header (nowis-align-to-window-center "NEXT"))
                       (org-agenda-prefix-format "%-16:(org-get-parent-heading): [%-4e] ")
                       (org-agenda-sorting-strategy '(todo-state-up priority-down timestamp-up))))
           (tags-todo ,(concat "+action" tag) ((org-agenda-overriding-header (nowis-align-to-window-center "Soft Time"))
                                               (org-agenda-prefix-format "%-16:(org-get-parent-heading): [%-4e] ")
                                               (org-agenda-sorting-strategy '(todo-state-up priority-down timestamp-up))
                                               ))
           (tags-todo "inbox-TODO=\"NEXT\""
                      ((org-agenda-overriding-header (nowis-align-to-window-center "Inbox"))
                       (org-agenda-prefix-format "%-16:(org-get-parent-heading): [%-4e] ")
                       (org-agenda-sorting-strategy '(todo-state-up priority-down timestamp-up))))
           (tags ,(concat "CLOSED>=\"<today>\"" tag)
                 ((org-agenda-overriding-header (nowis-align-to-window-center "Completed today"))
                  (org-agenda-prefix-format "%-16:(org-get-parent-heading): [%-4e] ")
                  ))
           (tags ,(concat "CLOSED>=\"<-1w>\"" tag)
                 ((org-agenda-overriding-header (nowis-align-to-window-center "Completed last 7 days"))
                  (org-agenda-prefix-format "%-16:(org-get-parent-heading): [%-4e] ")
                  ))
           )))

(setq org-agenda-custom-commands
      (list (nowis-create-agenda-command "g" "GTD" "")
            (nowis-create-agenda-command "w" "Work" "+work")
            ))
;; agenda clockreport
(setq org-agenda-start-with-clockreport-mode nil
      org-agenda-clockreport-parameter-plist '(:link t :maxlevel 5 :properties ("Effort"))
      org-clock-out-remove-zero-time-clocks t)
;; agenda style
(setq org-agenda-hide-tags-regexp "\\(inbox\\|action\\|journal\\)")
#+end_src
*** archive
#+begin_src elisp
(defun nowis-get-closed-time-or-current-time ()
  "Get the CLOSED time of the current subtree or use the current time if not available."
  (let ((closed-time (org-entry-get (point) "CLOSED")))
    (if closed-time
        (org-time-string-to-time closed-time)
      (current-time))))

(defun nowis-org-archive-subtree ()
  "Archive the current subtree to a corresponding archive file based on the task's completion date."
  (interactive)
  (let* ((current-file (buffer-file-name))
         (completed-time (nowis-get-closed-time-or-current-time))
         (archive-file (concat "gtd_archive_" (format-time-string "%Y" completed-time)
                               "::datetree/")))
    (setq org-archive-location archive-file)
    (org-archive-subtree)))

#+end_src
** org-srs
#+begin_src elisp
(setup lisp-fsrs)
(setup org-srs
  ;; (with-eval-after-load 'org
  ;;   (require 'org-srs-embed))
  ;; (add-hook 'org-mode-hook #'org-srs-embed-overlay-mode)
  (:with-map org-mode-map
    (:bind
     "<f4>" org-srs-item-confirm-command
     "<f5>"  org-srs-review-rate-easy
     "<f6>"  org-srs-review-rate-good
     "<f7>"  org-srs-review-rate-hard
     "<f8>"  org-srs-review-rate-again))
  (transient-define-prefix org-srs-transient-map()
    "Define transient-key map for org-fc functions"
    [
     ["review"
      ("s" "start current" org-srs-review-start)
      ("S" "start all" my/denote-review-srs-files-batch)
      ("q" "quit" org-srs-review-quit)
      ]
     ["create"
      ("n" "new create" org-srs-item-create)
      ("c" "cloze" org-srs-item-cloze-dwim)
      ("C" "uncloze" org-srs-item-uncloze-dwim)
      ("u" "update cloze" org-srs-item-cloze-update)
      ]])
  ;; font lock for cloze
  (defface my-org-fc-cloze-face
    '((t (:weight bold :underline t :foreground "pale violet red")))
    "A custom face with bold weight and a underline.")

  (font-lock-add-keywords
   'org-mode
   '((
      "\\({{[\\0-9a-z]+}{\\)\\([^}]+\\)\\(.*?}}\\)"
      (1 'shadow nil t)
      (2 'my-org-fc-cloze-face t)
      (3 'shadow nil t)
      )))
  )
#+end_src
** org-inc
#+begin_src elisp
(setup org-inc
  (setq org-inc-directory (expand-file-name "org-inc/" org-directory)
        org-srs-item-confirm #'org-srs-item-confirm-command)
  (:with-map org-mode-map
    (:bind "C-M-<return>" org-inc-continue
           ))
  (:when-loaded
    (defun my/m-z-action ()
      "If region active, show message; else call original M-z."
      (interactive)
      (if (region-active-p)
          (org-inc-extract)
        (call-interactively #'zap-to-char)))
    (global-set-key (kbd "M-z") #'my/m-z-action)
    )
  )
#+end_src
** insert from snipaste
#+begin_src elisp
(defun insert-file-from-snipaste ()
  "Prompt user to select a file from snipaste files and insert it into the current Org buffer."
  (interactive)
  (let ((file (read-file-name "Select a file from Downloads: " (concat nowis-doc-emacs-dir "02-binary-git/binary-files/01-pictures/snipaste/"))))
    (when (and file (file-exists-p file))
      ;; (insert (format "[[file:%s][%s]]" file (file-name-nondirectory file))))))
      (insert (format "[[file:%s]]" file)))))
#+end_src
** org-media-note
#+begin_src elisp
(setup org-media-note
  (setq org-media-note-screenshot-image-dir (concat nowis-doc-emacs-dir "30-saved-binary/org-media-note")))
#+end_src
** org-sliced-images
#+begin_src elisp
(setup org-sliced-images
  (:hook-into org-mode)
  )
#+end_src
* 阅读
** pdf-tools
#+begin_src elisp :tangle no
(setup tablist)
(setup pdf-tools
  (setq pdf-view-use-scaling t
           pdf-annot-list-format '((page . 3)
                                   (type . 10)
                                   (contents . 56)
                                   (date . 24)))
  (:with-map pdf-view-mode-map
    (:bind "h h" pdf-annot-add-highlight-markup-annotation
           "[" pdf-view-scroll-down-or-previous-page
           "]" pdf-view-scroll-up-or-next-page))
  (pdf-loader-install)
  )
;; (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)

(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src
** pdf-view-pagemark
#+begin_src elisp :tangle no
(setup pdf-view-pagemark
  (:hook-into pdf-view-mode-hook))
#+end_src
** reader
#+begin_src elisp :tangle no
(setup reader
  (:when-loaded
    (require 'reader-saveplace)
    )
  )
#+end_src
** newsticker
#+begin_src elisp
(setq newsticker-url-list '(("Planet Emacslife" "https://planet.emacslife.com/atom.xml")
                            ("sachachua" "https://sachachua.com/blog/feed/")
                            ("karthinks" "https://karthinks.com/index.xml")
                            ("protesilaos" "https://protesilaos.com/codelog.xml")
                            ("lazycat" "https://manateelazycat.github.io/feed.xml")
                            ("zhihu" "https://plink.anyfeeder.com/zhihu/daily")
                            ))
#+end_src
** nov
#+begin_src elisp
(setup esxml) ;; <- (setup kv)
(setup nov
  (:bind "]" nov-scroll-up
         "[" nov-scroll-down)
  (:file-match "\\.epub\\'"))
#+end_src
** darkroom
Simple distraction-free editing. I use darkroom instead of writeroom because it's more simple
#+begin_src elisp
(setup darkroom)
#+end_src
** markdown-mode
#+begin_src elisp
(setup markdown-mode
  (:file-match "\\.md\\'"))
#+end_src
* tools
** ai related
*** gptel
#+begin_src elisp
(setup gptel
  (setq gptel-default-mode 'org-mode
        gptel-crowdsourced-prompts-file (concat nowis-doc-emacs-dir "09-scripts/chatgpt.csv")
        ;; gptel-model 'deepseek-v3
        gptel-model 'gpt-4.1
        )
  (:global "M-p" gptel-send
           "M-r" gptel-rewrite
           "M-P" gptel)
  (:when-loaded
    (setq-default gptel-backend (gptel-make-gh-copilot "Copilot"))
    (gptel-make-openai "chatanywhere"
      :host "api.chatanywhere.tech"
      :header (lambda () `(("Authorization" . ,(concat "Bearer " (gptel--get-api-key)))))
      :key 'gptel-api-key
      :stream t
      :models '(gpt-4o-mini deepseek-r1 deepseek-v3 claude-3-7-sonnet-20250219))
    (gptel-make-openai "momenta"
      :host "llm-gateway.momenta.works"
      :header (lambda () `(("Authorization" . ,(concat "Bearer " (gptel--get-api-key)))))
      :key 'gptel-api-key
      :stream t
      :models '(claude-sonnet-4-20250514-v1:0 gemini/gemini-2.5-pro-preview-05-06 gemini-2.5-flash-preview-04-17))
    (gptel-make-gemini "Gemini" :key 'gptel-api-key :stream t)
    (gptel-make-deepseek "DeepSeek"
      :stream t
      :key 'gptel-api-key)
    ))
#+end_src
*** gptel-aibo
#+begin_src elisp
(setup gptel-aibo
  (:when-loaded
    (define-key gptel-aibo-mode-map
                (kbd "M-p") #'gptel-aibo-send)
    (define-key prog-mode-map (kbd "C-c i") #'gptel-aibo-summon)
    ))
#+end_src
*** gptel-quick
#+begin_src elisp
(setup gptel-quick
    (setq gptel-quick-timeout 40)
    (:global "M-l" gptel-quick)
    (with-eval-after-load 'embark
        (keymap-set embark-general-map "?" #'gptel-quick))
  )
#+end_src
*** macher
#+begin_src elisp
(setup macher
  (setq macher-action-buffer-ui 'org)
  (:when-loaded
    (macher-install)
    )
  )
#+end_src
*** claude-code-ide
#+begin_src elisp
(setup websocket)
(setup claude-code-ide
  (setq claude-code-ide-terminal-backend 'eat)
  (:when-loaded
    (claude-code-ide-emacs-tools-setup)
    )
  )
#+end_src
*** whisper
#+begin_src elisp
(setup whisper
  (setq whisper-language "auto"
        whisper-model "large-v3-turbo"
        whisper-translate nil
        whisper-use-threads (- (num-processors) 1)
        whisper--ffmpeg-input-device "default"
        whisper--ffmpeg-input-format "pulse"
        )
  (:when-loaded
    ;; (defun whisper--ctranslate2-command (input-file)
    ;;   `("whisper-ctranslate2"
    ;;     ,@(when whisper-use-threads (list "--threads" (number-to-string whisper-use-threads)))
    ;;     "--task" ,(if whisper-translate "translate" "transcribe")
    ;;     "--model" ,whisper-model
    ;;     "--language" "zh"
    ;;     "--output_dir" "/tmp/"
    ;;     "--output_format" "txt"
    ;;     ,input-file))

    ;; (advice-add 'whisper-command :override #'whisper--ctranslate2-command)
    )
  )
#+end_src
** webjump
#+begin_src elisp
(setup webjump
  (setq webjump-sites '(
                        ("Google" .
                         [simple-query "www.google.com"
                                       "www.google.com/search?q=" ""])
                        ("DouBan DuShu" .
                         [simple-query "book.douban.com"
                                       "search.douban.com/book/subject_search?search_text=" ""])
                        ("Github" .
                         [simple-query "github.com"
                                       "github.com/search?ref=simplesearch&q=" ""])
                        ("Aur" .
                         [simple-query "aur.archlinux.org"
                                       "aur.archlinux.org/packages?O=0&K=" ""])
                        ("leetcode-cn" .
                         [simple-query "leetcode.cn"
                                       "leetcode.cn/search/?q=" ""])
                        ("superlib" .
                         [simple-query "book.ucdrs.superlib.net"
                                       "http://book.ucdrs.superlib.net/search?sw=" "&allsw=%23%2Call&bCon=&ecode=utf-8&channel=search&Field=all"])
                        ("cppinfo" .
                         [simple-query "book.cppinfo.cn"
                                       "book.cppinfo.cn/so/home/qhsearch?q=" ""])
                        )))
#+end_src
** backup scripts
#+begin_src elisp
(defun rsync-push-binary-files()
  (interactive)
  (async-shell-command "rsync -avbihn --exclude '.git' --exclude '.svn' --delete \
     ~/Documents/emacs/02-binary-git/binary-files/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/02-binary-git/binary-files/")
  (let ((answer (read-char-choice "Do you want to continue? [y/n] " '(?y ?n))))
    (cond
     ((eq answer ?y)
      (async-shell-command " rsync -avbih --exclude '.git' --exclude '.svn' --delete \
     ~/Documents/emacs/02-binary-git/binary-files/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/02-binary-git/binary-files/"))
     ((eq answer ?n) (message "transfer exit")))))

(defun rsync-pull-binary-files()
  (interactive)
  (async-shell-command " rsync -avbih --exclude '.git' --exclude '.svn' --delete\
 lewis-nas@192.168.31.108:/share/my_webdav/rsync/02-binary-git/binary-files/ ~/Documents/emacs/02-binary-git/binary-files/"))

(transient-define-prefix backup-leader-map()
  "Define leader-key map for backup functions"
  [["rsync"
    ("p" "push doc" rsync-push-binary-files)
    ("F" "pull doc" rsync-pull-binary-files)]])
#+end_src

** server
#+begin_src elisp
(setup server
   (progn
     (require 'server)
     (unless (server-running-p)
       (server-start))
   ))
#+end_src
** macos-ocr
#+begin_src elisp
(defun my/siri-ocr ()
    (interactive)
    (shell-command "shortcuts run \"OCR Selected Area\"")
    (do-applescript "tell application id \"org.gnu.Emacs\" to activate")
  )
(keymap-global-set "C-c M-o" #'my/siri-ocr)
#+end_src
** esup
ESUP - Emacs Start Up Profiler
#+begin_src elisp
(setup esup
  ;; (if (eq system-type 'darwin)
      (setq esup-depth 0)
      ;; )
  )
#+end_src
** uniline
#+begin_src elisp
(setup uniline
  (:bind "M-i" #'uniline-launch-interface)
  )
(setup uniline-transient
  (:autoload uniline-mode uniline-launch-interface)
  )
#+end_src
** excalidraw
#+begin_src elisp
(setq org-excalidraw-default-directory (concat denote-directory "/excalidraw/"))
(defconst org-excalidraw-default-template
  "{
    \"type\": \"excalidraw\",
    \"version\": 2,
    \"source\": \"https://excalidraw.com\",
    \"elements\": [],
    \"appState\": {
      \"gridSize\": null,
      \"viewBackgroundColor\": \"#ffffff\"
    },
    \"files\": {}
  }
"
  "excalidraw template in JSON.")

(defun org-excalidraw-create-drawing ()
  "Create an excalidraw drawing and optionally insert an org-mode link at point."
  (interactive)
  (let* ((directory (if org-excalidraw-default-directory
                        (expand-file-name org-excalidraw-default-directory)
                      nil))
         (temp-path (concat directory "temp.excalidraw"))
         (origin-buffer (current-buffer))
         (new-buf (find-file-noselect temp-path))
         (new-path (with-current-buffer new-buf
                     (insert org-excalidraw-default-template)
                     (save-buffer)
                     (let ((new-path (call-interactively #'denote-rename-file)))
                       (embark-open-externally new-path)
                       new-path))
                   ))
    (switch-to-buffer origin-buffer)
    (when (derived-mode-p 'org-mode)
      (insert (format "[[file:%s]]" new-path)))))
#+end_src
** manage-web-bookmarks
#+begin_src elisp
(setq org-bookmarks-file (concat nowis-doc-emacs-dir "01-orgmode/xnotes/20250731T173729--bookmarks.org"))
(defun my/add-bookmark ()
  "add bookmark for url into org files"
  (interactive)
  (let ((url (read-string "URL: "))
        (title (read-string "TiTle: "))
        (timestamp (format-time-string "[%Y-%m-%d %a %H:%M]")))
    (with-current-buffer (find-file-noselect org-bookmarks-file)
      (goto-char (point-max))
      (insert (format "\n* %s\n[[%s]]\n  added: %s\n" title url timestamp))
      (save-buffer))))

(defun my/consult-org-bookmarks ()
  "A bookmark browser based on consult-org-heading, will return to origin place after opening url"
  (interactive)
  (let ((original-buffer (current-buffer))
        (original-point (point)))
    (find-file org-bookmarks-file)
    (condition-case err
        (progn
          (consult-org-heading)
          (let ((url (save-excursion
                       (forward-line 1)
                       (when (looking-at "\\[\\[\\([^]]+\\)\\]\\]")
                         (match-string 1)))))
            (when url
              (if (not (featurep 'embark))
                  (require 'embark))
                (embark-open-externally url)))
            (switch-to-buffer original-buffer)
            (goto-char original-point))
          (quit
           (switch-to-buffer original-buffer)
           (goto-char original-point))
          (error
           (switch-to-buffer original-buffer)
           (goto-char original-point)
           (signal (car err) (cdr err))))))
#+end_src
* games
** minesweeper
#+begin_src elisp
(setup minesweeper
  (setq gamegrid-user-score-file-directory (concat nowis-doc-emacs-dir "66-gamegrid-user-score"))
  )
#+end_src
** blackjack
* system-specific-config
** windows-wslg
These codes are used to solve copy & paste problems under wslg inside win10/win11
#+begin_src elisp
;; solve the problem of copying from windows to wslg
(if (string= "Arch" (getenv "WSL_DISTRO_NAME"))
    (progn
      ;; (set-clipboard-coding-system 'gbk-dos)
      ;; solve the problem of copying from wslg to windows
      (defun wsl-copy-region-to-clipboard (start end)
        "Copy region to Windows clipboard."
        (interactive "r")
        (call-process-region start end "wl-copy" nil 0))

      (defun wsl-clipboard-to-string ()
        "Return Windows clipboard as string."
        (let ((coding-system-for-read 'dos))
          (substring; remove added trailing \n
           (shell-command-to-string
            "wl-paste") 0 -1)))
      (defun wsl-paste-from-clipboard (arg)
        "Insert Windows clipboard at point. With prefix ARG, also add to kill-ring"
        (interactive "P")
        (let ((clip (wsl-clipboard-to-string)))
          (insert clip)
          (if arg (kill-new clip))))
      (global-set-key [remap kill-ring-save] #'wsl-copy-region-to-clipboard)
      (global-set-key [remap meow-yank] #'wsl-paste-from-clipboard)
      ))
#+end_src
** android
#+begin_src elisp
(if (eq system-type 'android)
    (progn
      (setq touch-screen-display-keyboard t)
      (setq overriding-text-conversion-style nil)
      ))
(defun android-toggle-keyboard()
  (interactive)
  (if touch-screen-display-keyboard
      (progn
        (setq touch-screen-display-keyboard nil)
        (tool-bar-add-item
         "keyboard-off" 'android-toggle-keyboard
         'android-toggle-keyboard
         :help "Toggle keyboard")
        (message "Disable virtual keyboard"))
    (setq touch-screen-display-keyboard t)
    (tool-bar-add-item
     "keyboard" 'android-toggle-keyboard
     'android-toggle-keyboard
     :help "Toggle keyboard")
    (message "Enable virtual keyboard")))
#+end_src
