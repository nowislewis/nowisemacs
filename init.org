#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/modules/init-config.el
I failed in love with denote, so previous *org-roam* configs were refiled into [[file:useful-tools/old-elisps/org-roam-config.org][org-roam configs]]
* Content                                                               :toc:
- [[#startup-config][Startup config]]
  - [[#ui-speed-up][UI speed up]]
  - [[#basic-modes][basic modes]]
  - [[#load-path][load-path]]
  - [[#drop-out][drop out]]
  - [[#set-vars][set vars]]
- [[#package-management][Package Management]]
  - [[#setup][setup]]
  - [[#epkg][epkg]]
- [[#gcmh][gcmh]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#meow][meow]]
  - [[#transient-and-related-leader-map][transient and related leader-map]]
  - [[#meow-leader-keybindings][meow leader keybindings]]
  - [[#which-key][which-key]]
  - [[#electric][electric]]
  - [[#dwim][dwim]]
- [[#package-library][Package Library]]
  - [[#dash][dash]]
  - [[#s][s]]
  - [[#f][f]]
- [[#ui][UI]]
  - [[#font][font]]
  - [[#variable-pitch][variable-pitch]]
  - [[#theme][Theme]]
  - [[#line-number][line number]]
  - [[#nerd-icons][nerd-icons]]
  - [[#nerd-icons-completion][nerd-icons-completion]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#diff-hl][diff-hl]]
  - [[#fringe-mode][fringe-mode]]
  - [[#emacs-dashboard][emacs-dashboard]]
  - [[#doom-modeline][doom-modeline]]
  - [[#mini-echo][mini-echo]]
  - [[#hl-todo][hl-todo]]
  - [[#highlight-line][highlight line]]
  - [[#show-paren-mode][show-paren-mode]]
- [[#general-configuration][General Configuration]]
  - [[#simple][simple]]
  - [[#general-builtin-modes][general builtin modes]]
  - [[#repeat-mode][repeat-mode]]
  - [[#backup][backup]]
  - [[#no-littering][no-littering]]
  - [[#recentf][recentf]]
  - [[#自动换行][自动换行]]
  - [[#so-long][so-long]]
  - [[#tramp][TRAMP]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#undo][Undo]]
- [[#search][Search]]
  - [[#isearch][isearch]]
  - [[#consult-commands][Consult Commands]]
  - [[#rgel][rg.el]]
- [[#补全][补全]]
  - [[#completions-with-vertico][Completions with Vertico]]
  - [[#orderless-and-pinyinlib][Orderless and pinyinlib]]
  - [[#marginalia][Marginalia]]
  - [[#embark][embark]]
  - [[#yasnippet][yasnippet]]
  - [[#tempel][tempel]]
- [[#window-management][Window Management]]
  - [[#winner-mode][winner-mode]]
  - [[#popper][popper]]
  - [[#burly][burly]]
  - [[#move][Move]]
- [[#ibuffer][ibuffer]]
  - [[#ibuffer-1][ibuffer]]
- [[#input][Input]]
  - [[#posframe][posframe]]
  - [[#pyim][pyim]]
  - [[#rime][rime]]
- [[#file-and-browsing][File and Browsing]]
  - [[#file-browsing][file browsing]]
  - [[#structure-browsing][structure browsing]]
  - [[#tab-line-and-tab-bar][tab-line and tab-bar]]
  - [[#tabspaces][tabspaces]]
  - [[#project][project]]
  - [[#project-rootfile][project-rootfile]]
- [[#shell][shell]]
  - [[#eshell][eshell]]
  - [[#eat][eat]]
- [[#git][git]]
  - [[#magit][magit]]
  - [[#ediff][ediff]]
- [[#program][Program]]
  - [[#language][Language]]
  - [[#useful-programing-tools][Useful programing tools]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org-mode]]
  - [[#ui-1][ui]]
  - [[#org-download][org-download]]
  - [[#ox-hugo][ox-hugo]]
  - [[#weblorg][weblorg]]
  - [[#org-clock][org-clock]]
  - [[#org-noter][org-noter]]
  - [[#org-present][org-present]]
  - [[#bibtex-related][bibtex related]]
  - [[#toc-org][toc-org]]
  - [[#denote-and-related][denote and related]]
  - [[#find-orgmode-dir-files][find orgmode dir files]]
  - [[#org-imagine-excalidraw][org-imagine, excalidraw]]
  - [[#ob-d2][ob-d2]]
  - [[#auto-insert][auto-insert]]
  - [[#org-remark][org-remark]]
  - [[#clue][clue]]
  - [[#org-transclusion][org-transclusion]]
  - [[#agendagtd][agenda/gtd]]
  - [[#org-agenda-property][org-agenda-property]]
  - [[#org-ql][org-ql]]
  - [[#mpvi][mpvi]]
  - [[#org-fc][org-fc]]
  - [[#anki-helper][anki-helper]]
  - [[#shrface][shrface]]
  - [[#org-mind-map][org-mind-map]]
- [[#english-翻译][english 翻译]]
  - [[#go-translate][go-translate]]
  - [[#immersive-translate][immersive-translate]]
- [[#阅读][阅读]]
  - [[#pdf-tools][pdf-tools]]
  - [[#pdf-view-pagemark][pdf-view-pagemark]]
  - [[#elfeed][elfeed]]
  - [[#efleed-org][efleed-org]]
  - [[#nov][nov]]
  - [[#nov-xwidget][nov-xwidget]]
  - [[#darkroom][darkroom]]
  - [[#markdown-mode][markdown-mode]]
  - [[#markdown-xwidget][markdown-xwidget]]
- [[#tools][tools]]
  - [[#xwidget-and-browser][xwidget and browser]]
  - [[#eaf][eaf]]
  - [[#holo-layer][holo-layer]]
  - [[#app-launcher][app-launcher]]
  - [[#ai-related][ai related]]
  - [[#webjump][webjump]]
  - [[#backup-scripts][backup scripts]]
  - [[#video-and-music][video and music]]
  - [[#literate-calc][literate-calc]]
  - [[#server][server]]
  - [[#atomic-chrome][atomic-chrome]]
  - [[#macos-ocr][macos-ocr]]
- [[#use-single-file-to-load-configs][use single file to load configs]]
  - [[#provide][provide]]
  - [[#load-init-configel][load init-config.el]]
- [[#quick-edit-and-minimal-file][quick-edit and minimal-file]]
  - [[#init-quick-edit][init-quick-edit]]
  - [[#init-minimal][init-minimal]]

* Startup config
** UI speed up
#+NAME: ui-speed-up
#+begin_src elisp :tangle ~/.emacs.d/early-init.el
;; -*- lexical-binding: t; -*-
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.5) ;;defer gc futher back
;; Package initialize occurs automatically, before `user-init-file' is
;; loaded, but after `early-init-file'. We handle package
;; initialization, so we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Inhibit resizing frame
(setq frame-inhibit-implied-resize t)
;; disable warning
(setq byte-compile-warnings nil)
;; no title bar
;; (add-to-list 'default-frame-alist '(undecorated . t))
;; Faster to disable these here (before they've been initialized)
(push '(alpha-background . 80) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
;; (push '(undecorated . t) default-frame-alist)
(setq initial-major-mode 'fundamental-mode ;; 默认用最简单的模式
      package--init-file-ensured t
      inhibit-startup-message t             ; 关闭启动 Emacs 时的欢迎界面
      )

;; speed font
;; (add-to-list 'default-frame-alist '(font . "Maple Mono SC NF"))

;; add support for android port of emacs
(if (eq system-type 'android)
    (setenv "PATH" (format "%s:%s" "/data/data/com.termux/files/usr/bin"
		                   (getenv "PATH")))
  (setenv "LD_LIBRARY_PATH" (format "%s:%s"
				                    "/data/data/com.termux/files/usr/lib"
				                    (getenv "LD_LIBRARY_PATH")))
  (push "/data/data/com.termux/files/usr/bin" exec-path)
  )
#+end_src
** basic modes
#+NAME: basic-modes
#+begin_src elisp
;; -*- lexical-binding: t; -*-
;; basic modes
(setq use-short-answers t)
(setq confirm-kill-emacs 'y-or-n-p)
(setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
(set-default-coding-systems 'utf-8)
(setq-default indent-tabs-mode nil)

(setq next-screen-context-lines 0) ;; scroll up/down lines
(setq-default tab-width 4)
;; 平滑地进行半屏滚动，避免滚动后recenter操作
(setq scroll-step 1
      scroll-conservatively 10000)
(setq completions-detailed t) ;;useful in emacs 28
(setq use-dialog-box nil)               ;never pop dialog
(setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处

;; (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙
;; (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src
** load-path
#+NAME: load-path
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
(require 'borg)
(setq borg-rewrite-urls-alist
      '(("git@github.com:" . "https://github.com/")
        ("git@gitlab.com:" . "https://gitlab.com/")))
(borg-initialize)
#+end_src
** drop out
The following content is not enabled yet, because I want to minimize unnecessary settings as much as possible
#+begin_src elisp :tangle no
;; Restore emacs session.
(setq initial-buffer-choice t)
(run-with-timer 1 nil #'(lambda () (bury-buffer)))
;; 增加IO性能
(setq process-adaptive-read-buffering nil)
(setq read-process-output-max (* 1024 1024))

(transient-mark-mode 1)                 ;标记高亮
(global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
(setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
(setq-default comment-style 'indent)    ;设定自动缩进的注释风格
(setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
(setq split-width-threshold nil)        ;分屏的时候使用上下分屏
(setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
(setq confirm-kill-processes nil)       ;退出自动杀掉进程
(setq async-bytecomp-allowed-packages nil) ;避免magit报错
(setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
      '((100 left)
        (24 right ((19 right)
                   (5 right)))))
(setq profiler-report-memory-line-format
      '((100 left)
        (19 right ((14 right profiler-format-number)
                   (5 right)))))

;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮
(setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
#+end_src
** set vars
I use the following file paths to manage all the files in Nowisemacs:
#+begin_example
emacs
├── 01-orgmode
│   ├── org-remark
│   └── xnotes
├── 02-binary-files
│   ├── 01-pictures
│   ├── 02-searchable
│   ├── 03-stardicts
│   ├── 04-org-imagine
│   └── 10-report-backup
├── 03-bibliography
├── 04-beancount
├── 05-excalidraw
├── 06-anki
├── 07-pyim
│   └── dcache
├── 08-keys
└── 09-scripts
#+end_example
1. All files and folders except =02-binary-files= are managed under git control, and =02-binary-file= is managed under =rsync= or =restic=.
2. =01-orgmode= stores .org files, where =org-remark= is used to store remark notes, =xnote= is the default directory of =Denote= .
3. =02-binary-files=, as its name, storing binary-fils. For example, =02-searchable= is used store the PDF of the literature
   and daily MS Office files, the meaning of searchable means that all files under this folder maybe searched or
   modified latter, and they should have nice naming specifications for convenience search.

#+begin_src elisp
(defvar nowis-config-file (expand-file-name "init.org" user-emacs-directory))
(defvar nowis-config-useful-tools (expand-file-name "useful-tools/" user-emacs-directory))
(defvar nowis-doc-emacs-dir (file-truename "~/Documents/emacs/"))
(defvar nowis-gtd-dir (concat nowis-doc-emacs-dir "01-orgmode/xnotes/gtd"))
(defvar nowis-bib-dir (concat nowis-doc-emacs-dir "03-bibliography/"))
(defvar nowis-bib-pdf-dir (concat nowis-doc-emacs-dir "02-binary-files/02-searchable/01-papers-markable/"))
#+end_src
* Package Management
** setup
#+NAME: setup
#+begin_src elisp
(require 'setup)

(setup-define :defer
  (lambda (features)
    `(run-with-idle-timer 2 nil
                          (lambda ()
                            ,features)))
  :documentation "Delay loading the feature until a certain amount of idle time has passed."
  :repeatable t)

(setup-define :load-after
  (lambda (features &rest body)
    (let ((body `(progn
                   (require ',(setup-get 'feature))
                   ,@body)))
      (dolist (feature (if (listp features)
                           (nreverse features)
                         (list features)))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES."
  :indent 1)

(setup-define :if-system
  (lambda (systemtype)
    `(unless (eq system-type ,systemtype)
       ,(setup-quit)))
  :documentation "If SYSTEMTYPE is not the current systemtype, stop evaluating form.")

(setup-define :autoload
  (lambda (func)
    (let ((fn (if (memq (car-safe func) '(quote function))
                  (cadr func)
                func)))
      `(unless (fboundp (quote ,fn))
         (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
  :documentation "Autoload COMMAND if not already bound."
  :repeatable t
  :signature '(FUNC ...))

(setup-define :mtime
  (lambda ()
    (defvar start-time (current-time))
    (let ((feature-string (symbol-name (setup-get 'feature)))
          (load-time `(float-time (time-subtract (current-time) start-time))))
      `(progn
         (message (format (concat ,feature-string ":%f") ,load-time))
         (setq start-time (current-time))
         )))
  :documentation "Measures the time from the end of the previous feature to the end of the current feature")

#+end_src
** epkg
I use borg to manage packages, so setup.el is only used to config packages quickly. There is no  need for epkg anymore.
#+begin_src elisp
(setup compat)
;; (setup emacsql)
;; (setup closql)

;; (when (>= emacs-major-version 29)
;;   (setq epkg-database-connector 'sqlite-builtin))
;; (setup epkg)
#+end_src
* gcmh
Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity.
#+name: gcmh
#+begin_src elisp
(setup gcmh
  (setq gcmh-auto-idle-delay-factor 10
           gcmh-high-cons-threshold (* 16 1024 1024))
  (gcmh-mode 1))
#+end_src
* Keyboard Bindings
I used to be a vim(evil) user, but now I use meow to manage all my keys.
** meow
Maybe I should add a new state.
#+name: meow
#+begin_src elisp
(setup meow
  (require 'meow)
  (setq meow-use-keypad-when-execute-kbd nil
        meow-expand-exclude-mode-list nil
        meow-use-clipboard t
        ;; meow-cursor-type-normal 'box
        ;; meow-cursor-type-insert '(bar . 1)
        meow-replace-state-name-list '((normal . "N")
                                       (motion . "M")
                                       (keypad . "K")
                                       (insert . "I")
                                       (beacon . "B"))
        meow-use-enhanced-selection-effect t
        meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
        meow-keypad-start-keys '((?c . ?c)
                                 (?x . ?x))
        meow-char-thing-table '((?\( . round)
                                (?\) . round)
                                (?\[ . square)
                                (?\] . square)
                                (?\{ . curly)
                                (?\} . curly)
                                (?\" . string)
                                (?w . symbol)
                                ;; (?w . window)
                                (?b . buffer)
                                (?p . paragraph)
                                (?l . line)
                                (?d . defun)
                                (?s . sentence))
        )
  ;; motion keys
  (meow-motion-overwrite-define-key '("j" . meow-next)
                                    '("k" . meow-prev)
                                    '("h" . meow-left)
                                    '("l" . meow-right)
                                    '("<escape>" . ignore)
                                    '("." . repeat))
  ;; normal keys
  (meow-normal-define-key '("0" . meow-expand-0)
                          '("9" . meow-expand-9)
                          '("8" . meow-expand-8)
                          '("7" . meow-expand-7)
                          '("6" . meow-expand-6)
                          '("5" . meow-expand-5)
                          '("4" . meow-expand-4)
                          '("3" . meow-expand-3)
                          '("2" . meow-expand-2)
                          '("1" . meow-expand-1)

                          '("a" . meow-vim-append)
                          ;; '("A" . meow-append-vim)
                          '("b" . meow-back-word)
                          '("B" . meow-back-symbol)
                          '("c c" . meow-change)
                          '("d" . meow-kill)
                          '("e" . meow-next-word)
                          '("E" . meow-next-symbol)
                          '("f" . meow-find)
                          '("g" . g-extra-commands)
                          '("G" . meow-grab)
                          '("h" . meow-left)
                          '("H" . meow-left-expand)
                          '("i" . meow-insert)
                          ;; '("I" . meow-insert-vim)
                          '("j" . meow-next)
                          '("J" . meow-next-expand)
                          '("k" . meow-prev)
                          '("K" . meow-prev-expand)
                          '("l" . meow-right)
                          '("L" . meow-right-expand)
                          '("m" . consult-register-store)
                          '("M" . meow-block)
                          '("n" . meow-search)
                          '("N" . meow-pop-selection);;

                          '("o" . meow-open-below)
                          '("O" . meow-open-above)
                          '("p" . meow-yank)
                          '("P" . meow-yank-pop);;
                          '("q" . meow-quit)
                          '("Q" . consult-goto-line)
                          '("r" . meow-replace)
                          '("R" . meow-swap-grab)
                          '("s" . meow-line)
                          '("S" . meow-kmacro-lines) ;;
                          '("t" . meow-till)
                          '("u" . meow-undo)
                          '("U" . vundo)
                          '("v v" . meow-visit) ;;
                          '("V" . meow-kmacro-matches) ;;
                          '("w" . meow-mark-word)
                          '("W" . meow-mark-symbol)

                          '("x" . meow-delete)
                          '("X" . meow-backward-delete)
                          '("y" . meow-save)
                          ;; '("Y" . meow-sync-save)
                          '("z a" . hs-toggle-hiding)
                          '("z c" . hs-hide-block)
                          '("z o" . hs-show-block)
                          '("z m" . hs-hide-all)
                          '("z r" . hs-show-all)
                          '("z z" . recenter-top-bottom)

                          '("v i" . meow-inner-of-thing)
                          '("v a" . meow-bounds-of-thing)
                          '("v =" . insert-equation)

                          '("-" . negative-argument)
                          '("=" . indent-region)
                          '("[" . meow-beginning-of-thing)
                          '("]" . meow-end-of-thing)
                          '("\\" . quoted-insert)
                          '(";" . meow-expand-1)
                          ;; '(":" . async-shell-command)
                          '("'" . consult-register-load)
                          '("," . meow-reverse)
                          '("." . repeat)

                          '("<escape>" . ignore)
                          '("!" . meow-start-kmacro-or-insert-counter)
                          '("@" . meow-end-or-call-kmacro)
                          '("#" . embark-toggle-highlight)
                          '("^" . meow-join)
                          '("*" . embark-next-symbol)
                          '("/" . isearch-forward))
  (defun meow-vim-append ()
    "Like vim, move to the end of selection, switch to INSERT state."
    (interactive)
    (if meow--temp-normal
        (progn
          (message "Quit temporary normal mode")
          (meow--switch-state 'motion))
      (if (not (region-active-p))
          (progn
            (when (and meow-use-cursor-position-hack
                       (< (point) (point-max)))
              (forward-char 1))
            (forward-char 1)
            )
        (meow--direction-forward)
        (meow--cancel-selection))
      (meow--switch-state 'insert)))
  (meow-global-mode 1)

  (defun toggle-between-meow-normal-motion()
    (interactive)
    (if meow-motion-mode (meow-normal-mode) (meow-motion-mode)))
  (global-set-key (kbd "M-\\") #'toggle-between-meow-normal-motion)
  )
#+end_src

** transient and related leader-map
*** transient
#+name: transient
#+begin_src elisp
(setup transient
  (require 'transient)
  (:with-map transient-base-map
    (:bind "<escape>" transient-quit-one)))
#+end_src
*** g in normal mode
#+begin_src elisp
(transient-define-prefix g-extra-commands()
  "Define notes leader-key maps"
  [["Code find"
    ("d" "find-definitions" xref-find-definitions)
    ("D" "find-references" xref-find-references)
    ("i" "find-impl" eglot-find-implementation)
    ("s" "find-symbols" xref-find-apropos)
    ("o" "find-def-other-window" xref-find-definitions-other-window)
    ]
   ["Code action"
    ("a" "code-actions" eglot-code-actions)
    ("r" "rename" eglot-rename)
    ("f" "format-all-region" format-all-region)
    ("F" "format-all-buffer" format-all-buffer)]
   ["diagnostic"
    ("n" "jump-to-next-diagnostic" flymake-goto-next-error)
    ("N" "jump-to-prev-diagnostic" flymake-goto-prev-error)
    ("l" "list-diagnostics" consult-flymake)
    ]
   ["Navigate"
    ("m" "consult-mark" consult-mark)
    ]
   ["Clue"
    ("y" "clue-copy" clue-copy)
    ("p" "clue-yank" clue-paste)
    ]
   ["citre"
    ("c d" "citre-jump" citre-jump)
    ("c D" "citre-jump-to-reference" citre-jump-to-reference)
    ("c p" "citre-peek" citre-peek)
    ("c P" "citre-peek-reference" citre-peek-reference)
    ("c r" "citre-peek-restore" citre-peek-restore)
    ("c a" "citre-ace-peek" citre-ace-peek)
    ("c u" "update-tags-file" citre-update-this-tags-file)
    ("c s" "peek-save-session" citre-peek-save-session)
    ("c l" "peek-load-session" citre-peek-load-session)
    ]
   ])
#+end_src
*** find-file
#+begin_src elisp
(transient-define-prefix file-leader-map()
  "Define leader-key map for file-related functions"
  [["config"
    ("p" "personal emacs config" (lambda()
                                   (interactive)
                                   (find-file nowis-config-file)))
    ("e" "emacs documents" (lambda()
                             (interactive)
                             (find-file nowis-doc-emacs-dir)))
    ("d" "dot files" (lambda()
                       (interactive)
                       (find-file "~/dotfiles")))
    ]
   ["history"
    ("r" "recent file" consult-recent-file)]])
#+end_src
*** lewis
#+begin_src elisp
(transient-define-prefix lewis-leader-map()
  "Define leader-key map for special functions"
  [
   ["Imenu"
    ("l" "Imenu list smart toggle" imenu-list-smart-toggle)
    ("L" "Boxy imenu" boxy-imenu)]
   ;; org-download
   ["Org download"
    ("d" "Screenshot" org-download-screenshot)]
   ["Translate"
    ;; ("t" "toggle english helper" lsp-bridge-toggle-sdcv-helper)
    ("i" "immersive translate buffer" immersive-translate-buffer)
    ]])
#+end_src
*** buffer
#+begin_src elisp
(transient-define-prefix buffer-leader-map()
  "Define leader-key map for buffer functions"
  [["Buffer"
    ("b" "consult-buffer" consult-buffer) ;; work with C-x b
    ("k" "kill-current-buffer" kill-current-buffer)
    ("l" "meow-last-buffer" meow-last-buffer)
    ("n" "next-buffer" next-buffer)
    ("p" "previous-buffer" previous-buffer)
    ("r" "revert-buffer" revert-buffer)]
   ["Bookmark"
    ("j" "bookmark-jump" bookmark-jump)
    ("m" "bookmark-set" bookmark-set)
    ("M" "bookmark-delete" bookmark-delete)]
   ["Burly"
    ("w" "burly-bookmark-windows" burly-bookmark-windows)
    ("o" "burly-open-bookmark" burly-open-bookmark)
    ]]
  )
#+end_src
*** notes
#+begin_src elisp
(transient-define-prefix notes-leader-map()
  "Define leader-key map for notes functions"
  [["Roam"
    ("r f" "denote-open-or-create" denote-open-or-create)
    ("r p" "find-papers" project-find-papers-dir-files)
    ("r s" "find-all-searchable" project-find-searchable-dir-files)
    ;; ("rc" "consult-notes" consult-notes)
    ("r g" "project-find-gtd-dir-files" project-find-gtd-dir-files)
    ("r z" "ls zettel" my/zettel-signature-topics)
    ("r Z" "ls not zettel" my/zettel-not-signatured-topics)
    ]
   ["bibtex"
    ("e" "ebib" ebib)
    ("b" "citar-open" citar-open)
    ]
   ;; ["serch engine"
   ;;  ("x" "xeft" xeft)
   ;;  ]
   ["org-noter"
    ("n" "org-noter" org-noter)]
   ["org-fc"
    ("f" "org-fc" org-fc-transient-load-map)]
   ["org-mind-map"
    ("m" "org-mind-map-dwim" org-mind-map-dwim)
    ("M" "org-mind-map" org-mind-map-choose-type-dwim)
    ("w" "org-mind-wbs-open" plantuml-org-to-wbs-open)
    ("p" "org-mind-plantuml" plantuml-org-to-mindmap)
    ("P" "org-mind-plantuml-open" plantuml-org-to-mindmap-open)
    ]
   ]
  )
#+end_src
*** search
#+begin_src elisp
(transient-define-prefix search-leader-map()
  "Define leader-key map for search functions"
  [
   ;; ["blink-search"
   ;;  ("b" "blink-search" blink-search)]
   ["grep"
    ("d" "grep-dir" lewis/ripgrep-search-other-dir)
    ("D" "grep-project" consult-ripgrep)
    ("g" "rg" rg)]
   ["find"
    ("f" "find-in-current" consult-find)
    ("F" "find-other-dir" lewis/find-file-other-dir)]
   ["built-in enhance"
    ("h" "history" consult-history)
    ("i" "imenu" consult-imenu)
    ("l" "keep-lines" consult-keep-lines)
    ("s" "line" consult-line)]
   ["web search"
    ("w" "webjump" webjump)]
   ])
#+end_src
*** apps
#+begin_src elisp
(transient-define-prefix apps-leader-map()
  "Define leader-key map for apps functions"
  [["agenda"
    ("a" "org-agenda" org-agenda)
    ("c" "capture" org-capture)
    ("i" "capture inbox" org-capture-inbox)]
    ["shell"
     ("i" "toggle-insert-cd" eat-toggle-insert-dir)
     ]
    ["mpvi"
     ("mo" "open" mpvi-open)
     ("ms" "seek" mpvi-seek)
     ("mi" "insert" mpvi-insert)
     ("ma" "emms-add" mpvi-emms-add)]
    ["others"
     ;; ("t" "org-pomodoro" org-pomodoro)
     ("l" "app-launcher-run-app" app-launcher-run-app)
     ("e" "elfeed" my-elfeed)
     ("r" "restart emacs" restart-emacs)
     ("w" "whisper" whisper-run)
     ]
    ])
#+end_src

*** ui
#+begin_src elisp
(transient-define-prefix toggle-leader-map()
  "Define leader-key map for ui functions"
  [("v" "toggle-variable-pitch" variable-pitch-mode)
   ("d" "toggle-darkroom" darkroom-mode)
    ])

#+end_src
** meow leader keybindings
#+name: meow-leader-keys
#+begin_src elisp
;; default
(meow-leader-define-key
 ;; SPC j/k will run the original command in MOTION state.
 '("j" . "H-j")
 '("k" . "H-k")
 '("h" . "H-h")
 '("l" . "H-l")
 '("." . "H-.")
 ;; Use SPC (0-9) for digit arguments.
 '("1" . meow-digit-argument)
 '("2" . meow-digit-argument)
 '("3" . meow-digit-argument)
 '("4" . meow-digit-argument)
 '("5" . meow-digit-argument)
 '("6" . meow-digit-argument)
 '("7" . meow-digit-argument)
 '("8" . meow-digit-argument)
 '("9" . meow-digit-argument)
 '("0" . meow-digit-argument)
 '("/" . meow-keypad-describe-key)
 '("?" . meow-cheatsheet))

;; buffer
(meow-leader-define-key
 '("b" . buffer-leader-map)
 ;; lewisliu
 '("e" . lewis-leader-map)
 ;; search
 '("s" . search-leader-map)
 ;; apps
 '("a" . apps-leader-map)
 ;; file
 '("f" . file-leader-map)
 ;; notes
 '("n" . notes-leader-map)
 ;;w workspace
 '("TAB" . tabspaces-leader-map)
 ;; ;; org gtd
 ;; '("d" . org-gtd-leader-map)
 ;; ui
 '("t" . toggle-leader-map)

 ;; remark
 '("r m" . org-remark-mark)
 '("r l" . org-remark-mark-line) ; new in v1.3
 '("r o" . org-remark-open)
 '("r ]" . org-remark-view-next)
 '("r [" . org-remark-view-prev)
 '("r r" . org-remark-remove)
 '("r d" . org-remark-delete)
 )
#+END_SRC
** which-key
#+name: which-key
#+begin_src elisp
(setup which-key
  (setq which-key-idle-delay 0.1)
  (:defer
  (which-key-mode))
  )
#+end_src
** electric
#+begin_src elisp
(setup elec-pair
  (electric-pair-mode))
#+end_src
** dwim
#+begin_src elisp
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)
#+end_src
* Package Library
** dash
#+begin_src elisp
(setup dash)
#+end_src
** s
#+begin_src elisp
(setup s)
#+end_src
** f
#+begin_src elisp
(setup f)
#+end_src
* UI
** font
#+name: font
#+begin_src elisp
(defun font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

;; font size
(if (eq system-type 'darwin)
    (defvar lewis-font-size 140)
  (defvar lewis-font-size 150))

;; fixed font
(setq lewis-fixed-font (cl-loop for font in '(
                                              "Maple Mono SC NF"
                                              "Unifont"
                                              ;; "InconsolataGo QiHei NF"
                                              ;; "yaheiInconsolata"
                                              "JetBrainsMono Nerd Font"
                                              "JetBrains Mono"
                                              "Sarasa Mono SC Nerd"
                                              "Monaco"
                                              "Consolas"
                                              )
                                when (font-installed-p font)
                                return font))
;; variable font
(setq lewis-variable-font (cl-loop for font in '(
                                                 "Helvetica"
                                                 "Times"
                                                 "Noto Sans CJK SC"
                                                 "LXGW WenKai"
                                                 "Maple UI"
                                                 ;; "Source Han Sans SC VF"
                                                 "Arial"
                                                 "Times New Roman")
                                   when (font-installed-p font)
                                   return font))

;; chinese font
(setq lewis-chinese-font (cl-loop for font in '(
                                                "Maple Mono SC NF"
                                                "Unifont"
                                                "Sarasa Mono SC Nerd"
                                                "Microsoft Yahei")
                                  when (font-installed-p font)
                                  return font))

;; symbol font
(setq lewis-symbol-font (cl-loop for font in '("Symbola"
                                               "Symbol")
                                 when (font-installed-p font)
                                 return font))

;; mayby I should remove all this font-seting and use only default font
(defun nowis-setup-fonts()
  "Setup fonts."
  (when (display-graphic-p)
    ;; Set default font
    (if lewis-fixed-font
        (progn
          (set-face-attribute 'default nil :family lewis-fixed-font :height lewis-font-size)
          (set-face-attribute 'fixed-pitch nil :family lewis-fixed-font :height 1.0)
          ))

    ;; variable-pitch
    (if lewis-variable-font
        (set-face-attribute 'variable-pitch nil :family lewis-variable-font :height 1.0))

    ;; Specify font for all unicode characters
    (if lewis-symbol-font
        (set-fontset-font t 'unicode lewis-symbol-font nil 'prepend))

    ;; Specify font for Chinese characters
    ;; (if lewis-chinese-font
    ;;     (set-fontset-font t '(#x4e00 . #x9fff) lewis-chinese-font))
    )
  )

(nowis-setup-fonts)
#+end_src
** variable-pitch
#+begin_src elisp
(defun dynamic-change-line-spacing( &optional ARG)
  (if line-spacing (setq-local line-spacing nil) (setq-local line-spacing 0.3)))
(advice-add 'variable-pitch-mode :after #'dynamic-change-line-spacing)
#+end_src
** Theme
*** ef-themes
#+name: themes
#+begin_src elisp
(setup ef-themes)
(load-theme 'ef-trio-dark t)
#+end_src
*** lazycat-theme
#+begin_src elisp
(setup lazycat-theme)
#+end_src
** line number
#+name: line-number
#+begin_src elisp
;; line number
;; only enable line number in some modes, borrowed from lazycat-emacs
(setq display-line-numbers-width-start t)
(setq line-number-display-limit large-file-warning-threshold)
(setq line-number-display-limit-width 1000)

(dolist (hook (list
               'prog-mode-hook
               ;;'org-mode-hook
               ))
  (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src
** nerd-icons
#+begin_src elisp
(setup nerd-icons)
#+end_src
** nerd-icons-completion
#+begin_src elisp
(setup nerd-icons-completion
  (:hook-into vertico-mode marginalia-mode))
#+end_src
** rainbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src elisp
(setup rainbow-delimiters
  (:hook-into prog-mode))
#+end_src
** diff-hl
diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src elisp
(setup diff-hl
  (:hook-into prog-mode)
  (:when-loaded
    (diff-hl-margin-mode)))
#+end_src
** fringe-mode
#+begin_src elisp
(setup fringe
  (fringe-mode 4)
)
#+end_src
** emacs-dashboard
#+begin_src elisp
(setup dashboard
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5))
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-startup-banner (concat nowis-config-useful-tools "banner.txt")
        dashboard-set-init-info t)
  (dashboard-setup-startup-hook)
  )
#+end_src
** doom-modeline
#+begin_src elisp
(setup shrink-path)

(setup doom-modeline
  (setq doom-modeline-height 1
        doom-modeline-unicode-fallback nil)
  (:when-loaded
    (if (facep 'mode-line-active)
        (set-face-attribute 'mode-line-active nil :height 120) ; For 29+
      (set-face-attribute 'mode-line nil :height 120))
    (set-face-attribute 'mode-line-inactive nil :height 120)
    )
  (:hook-into after-init))
#+end_src
** mini-echo
#+begin_src elisp
(setup hide-mode-line)
(setup mini-echo
  ;; set default segments of long/short style
  (setq mini-echo-default-segments
        '(:long ("major-mode" "buffer-name" "vcs" "buffer-position"
                 "buffer-size" "flymake" "process" "selection-info"
                 "narrow" "macro" "profiler" "meow")
                :short ("buffer-name-short" "buffer-position" "process"
                        "profiler" "selection-info" "narrow" "macro" "meow" )))
  (setq mini-echo-separator " ")
  )
#+end_src
** hl-todo
#+begin_src elisp
(setup hl-todo
  (global-hl-todo-mode))
#+end_src
** highlight line
*** hl-line
#+begin_src elisp
(setup hl-line
  (:global "C-l" #'nowis-recenter)
  ;; Only highliht current buffer in current window
  (setq hl-line-sticky-flag nil
        global-hl-line-sticky-flag nil)
  (global-hl-line-mode))
(defun nowis-recenter ()
  (interactive)
  (call-interactively 'recenter)
  (pulsar-pulse-line))
#+end_src
*** pulsar
#+begin_src elisp
(setup pulsar
  (pulsar-global-mode 1)
  (setq pulsar-delay 0.015
        pulsar-iterations 10)
  (:when-loaded
    (add-hook 'pulsar-pulse-functions 'ace-window)))
#+end_src
** show-paren-mode
#+begin_src elisp
(setup paren
  (setq show-paren-context-when-offscreen 'child-frame))
#+end_src
* General Configuration
** simple
#+name: simple
#+begin_src elisp
(setup simple
  ;; show line/column/filesize in modeline
  (setq line-number-mode t
        column-number-mode t
        size-indication-mode t
        kill-do-not-save-duplicates t
        shell-command-prompt-show-cwd t
        what-cursor-show-names t)
  ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)

  ;; (global-visual-line-mode)
  (dolist (hook (list
                 'prog-mode-hook
                 'org-mode-hook
                 ))
    (add-hook hook (lambda () (visual-line-mode))))

  )
#+end_src
** general builtin modes
#+name: general-builtin-modes
#+begin_src elisp
(setup save-place
  (:defer
   (save-place-mode))
  )

(setup autorevert
  (setq global-auto-revert-non-file-buffers t)
  (:defer
   (global-auto-revert-mode t)))                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer

(setup frame
  (blink-cursor-mode -1)                  ;指针不闪动
  )

(setup pixel-scroll
  ;; 最近发现和 pdf-view-mode 工作不协调
  (when (>= emacs-major-version 29)
    (pixel-scroll-precision-mode t)))
#+end_src
** repeat-mode
#+begin_src elisp
(setup repeat
  (repeat-mode))
#+end_src
** backup
*** super-save
#+begin_src elisp
(setq make-backup-files nil)
(setq auto-save-default nil)

(setup super-save
  (setq super-save-auto-save-when-idle t)
   (super-save-mode 1))
#+end_src
*** savehist
#+begin_src elisp
(setup savehist
  (setq history-length 10000
        history-delete-duplicates t
        savehist-save-minibuffer-history t)
  (savehist-mode))
#+end_src
** no-littering
#+begin_src elisp
(setup no-littering
  ;; (setq no-littering-var-directory (expand-file-name (concat user-emacs-directory "var/"))
  ;;       no-littering-etc-directory (expand-file-name (concat user-emacs-directory "etc/")))
   (require 'no-littering)
  )
#+end_src
** recentf
#+begin_src elisp
(setup recentf
   (setq recentf-max-saved-items 30
         recentf-exclude `("/tmp/" "/ssh:" ,(concat user-emacs-directory "lib/.*-autoloads\\.el\\'")))
   (add-to-list 'recentf-exclude no-littering-var-directory)
   (add-to-list 'recentf-exclude no-littering-etc-directory)
   (recentf-mode)
  )
#+end_src
** 自动换行
#+begin_src elisp
(setq-default fill-column 100)          ;默认显示 100列就换行
(setq word-wrap t)
(setq word-wrap-by-category t)
;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** so-long
解决长行卡死问题
#+begin_src elisp
(setup so-long
  (:defer
   (global-so-long-mode 1)
   ))
#+end_src
** TRAMP
#+begin_src elisp
(setq tramp-default-method "ssh")
#+end_src
** Automatically clean whitespace
#+begin_src elisp
(setup ws-butler
  (:hook-into text-mode prog-mode))
#+end_src
** exec-path-from-shell
可以优化速度, 建议看一下官网的一篇文章
#+name: exec-path-from-shell
#+begin_src elisp
(setup exec-path-from-shell
  (:defer
   (when (memq window-system '(mac ns x))
     (exec-path-from-shell-initialize)))
  )
#+end_src
** Undo
*** vundo for undo history
#+name: vundo
#+begin_src elisp
(setup vundo
  (:bind "l" vundo-forward
         "h" vundo-backward
         "j" vundo-next
         "k" vundo-previous))
#+end_src
* Search
** isearch
#+begin_src elisp
(setup isearch
  (setq isearch-lazy-count t
        ;; lazy-highlight-cleanup nil
        )
  (:bind [remap isearch-delete-char] isearch-del-char)
  (:when-loaded
    (defvar isearch-repeat-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "s") #'isearch-repeat-forward)
        (define-key map (kbd "r") #'isearch-repeat-backward)
        map))

    (dolist (cmd '(isearch-repeat-forward isearch-repeat-backward))
      (put cmd 'repeat-map 'isearch-repeat-map))

    ))
#+end_src
** Consult Commands
*** consult
#+name: consult
#+begin_src elisp
(setup consult
  (setq register-preview-delay 0.1
           register-preview-function #'consult-register-format
           xref-show-xrefs-function #'consult-xref
           xref-show-definitions-function #'consult-xref
           consult-project-root-function #'(lambda ()
                                           (when-let (project (project-current))
                                             (car (project-roots project)))))
  (:with-map minibuffer-local-map
    (:bind "C-r" consult-history)))
#+end_src
*** search other cwd
#+begin_src elisp
(defun lewis/ripgrep-search-other-dir()
  (interactive)
  (let ((current-prefix-arg '(-1)))
    (call-interactively 'consult-ripgrep)))

(defun lewis/find-file-other-dir()
  (interactive)
  (let ((current-prefix-arg '(-1)))
    (call-interactively 'consult-find)))
#+end_src
** rg.el
#+begin_src elisp
(setup rg)
#+end_src
* 补全
** Completions with Vertico
#+name: vertico
#+begin_src elisp
(setq vertico-cycle t)
(setup vertico
  (:with-map vertico-map
    (:bind [backspace] vertico-directory-delete-char))
  (vertico-mode))
#+end_src
** Orderless and pinyinlib
#+name: orderless
#+begin_src elisp
(setup orderless
  (setq completion-styles '(orderless)
           completion-category-defaults nil
           completion-category-overrides '((file (styles . (partial-completion)))))
  (:when-loaded
    (require 'pinyinlib)
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
    ))
#+end_src
** Marginalia
#+begin_src elisp
(setup marginalia
  ;; (setq marginalia-annotators '(marginalia-annotators-heavy
  ;;                               marginalia-annotators-light
  ;;                               nil))
  (:hook-into after-init))
#+end_src
** embark
should be check after reading the embark.el manual
#+begin_src elisp
(setup embark-consult
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

(setup embark
  (:also-load embark-consult)
  (:autoload embark-toggle-highlight)
  (setq prefix-help-command #'embark-prefix-help-command)
  (:global "C-S-a" embark-act))

(setup wgrep)
#+end_src
** yasnippet
#+begin_src elisp
(setup yasnippet
  (setq yas-snippet-dirs (list (concat nowis-config-useful-tools "snippets")))
  (yas-global-mode)
  )
#+end_src
** tempel
#+begin_src elisp
(setup tempel
  (setq tempel-path "~/.emacs.d/useful-tools/tempel-snippets"
           tempel-trigger-prefix "<")
  (:global "M-*" tempel-insert
           "M-+"  tempel-complete)
  (:with-map tempel-map
    (:bind "M-]"  tempel-next
           "M-["  tempel-previous)))
;; Setup completion at point
;; (defun tempel-setup-capf ()
;;   (setq-local completion-at-point-functions
;;               (cons #'tempel-completed
;;                     completion-at-point-functions)))
;; (add-hook 'prog-mode-hook 'tempel-setup-capf)
;; (add-hook 'text-mode-hook 'tempel-setup-capf)
#+end_src
* Window Management
** winner-mode
#+name: winner-mode
#+begin_src elisp
(setup winner
  (:defer
  (winner-mode t))
  )
#+end_src
** popper
Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm’s reach.
#+begin_src elisp
(setup popper
  (setq popper-reference-buffers '("\\*Messages\\*"
                                   "Output\\*$"
                                   "\\*Async Shell Command\\*"
                                   "gt-result"
                                   help-mode
                                   helpful-mode
                                   compilation-mode
                                   youdao-dictionary-mode)
        popper-window-height 0.33
        ;; popper-window-height  (lambda (win)
        ;;                         (fit-window-to-buffer
        ;;                          win
        ;;                          (floor (frame-height) 2)))
        )
  (:global "M-`" popper-toggle ;; shadown tmm-menubar
           "M-~" popper-cycle
           "C-M-`" popper-toggle-type
           )
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src
** burly
#+begin_src elisp
(setup burly
  (:defer
   (burly-tabs-mode)
   ))
#+end_src
** Move
*** avy
Jump anywhere in the world
#+begin_src elisp
(setup avy
  (:global "M-j" avy-goto-char-timer)
  (:when-loaded
  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)

  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
  (define-key isearch-mode-map (kbd "M-j") 'avy-isearch)
  ))
#+end_src
*** bookmark
#+begin_src elisp
(setq bookmark-default-file (concat nowis-doc-emacs-dir "bookmarks"))
#+end_src
*** windmove
#+begin_src elisp
(setup windmove
  (transient-define-prefix windmove-transient-keybindings()
    "Define windmove maps"
    [[("h" "left" windmove-left :transient t)
      ("H" "swap-left" windmove-swap-states-left :transient t)]
     [("j" "down" windmove-down :transient t)
      ("J" "swap-down" windmove-swap-states-down :transient t)]
     [("k" "up" windmove-up :transient t)
      ("K" "swap-up" windmove-swap-states-up :transient t)]
     [("l" "right" windmove-right :transient t)
      ("L" "swap-right" windmove-swap-states-right :transient t)]
     ])
  (:global "C-x O" #'windmove-transient-keybindings)
  )

#+end_src
*** ace-window
#+begin_src elisp
(setup ace-window
  (:global "M-o" ace-window))
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
      aw-scope 'frame
      )
#+end_src
*** hide-cursor-mode
#+begin_src elisp
(defvar-local hide-cursor--original nil)

(define-minor-mode hide-cursor-mode
  "Hide or show the cursor.

When the cursor is hidden `scroll-lock-mode' is enabled, so that
the buffer works like a pager."
  :global nil
  :lighter "H"
  (if hide-cursor-mode
      (progn
        (scroll-lock-mode 1)
        (setq-local hide-cursor--original
                    cursor-type)
        (setq-local cursor-type nil))
    (scroll-lock-mode -1)
    (setq-local cursor-type (or hide-cursor--original
                                t))))
(define-key global-map (kbd "<f7>") 'hide-cursor-mode)
#+end_src
* ibuffer
** ibuffer
#+name: ibuffer
#+begin_src elisp
(setup ibuffer
  (:global [remap list-buffers] #'ibuffer))
#+end_src
* Input
** posframe
#+begin_src elisp
(setup posframe)
#+end_src
** pyim
#+begin_src elisp :tangle no
(setup xr)
(setup pyim
  (setq pyim-cloudim 'baidu
           pyim-punctuation-translate-p '(no yes auto)
           pyim-page-tooltip 'posframe
           pyim-page-length 5
           pyim-dcache-backend 'pyim-dregcache
           pyim-dcache-directory (concat nowis-doc-emacs-dir "01-binary-files/pyim/dcache/")
           )
  (:when-loaded
    (require 'popup nil t)
    (require 'pyim-dregcache)
    (require 'pyim-cregexp-utils)
    (require 'pyim-cstring-utils)
    (set-default 'pyim-punctuation-half-width-functions
                 '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
    ;; (pyim-default-scheme 'xiaohe-shuangpin)
    (pyim-default-scheme 'quanpin)
    (pyim-isearch-mode 1)

    (defalias 'pyim-probe-meow-normal-mode #'(lambda nil
                                               (meow-normal-mode-p)))
    (set-default 'pyim-english-input-switch-functions '(pyim-probe-auto-english
                                                        pyim-probe-isearch-mode
                                                        pyim-probe-program-mode
                                                        pyim-probe-org-structure-template
                                                        pyim-probe-org-latex-mode
                                                        pyim-probe-meow-normal-mode))
    (defalias 'my-orderless-regexp
      #'(lambda
          (orig_func component)
          (let
              ((result
                (funcall orig_func component)))
            (pyim-cregexp-build result))))
    (advice-add 'orderless-regexp :around #'my-orderless-regexp)
    )
   (require 'pyim)
  ;; (setq default-input-method "pyim")
  )
#+end_src
** rime
#+begin_src elisp
(setq default-input-method "rime")
(with-eval-after-load 'rime
(setq rime-disable-predicates '(meow-normal-mode-p
                                   meow-motion-mode-p
                                   meow-keypad-mode-p
                                   rime-predicate-prog-in-code-p
                                   rime-predicate-punctuation-line-begin-p ;;在行首要输入符号时
                                   rime-predicate-after-alphabet-char-p ;;在英文字符串之后（必须为以字母开头的英文字符串）
                                   rime-predicate-current-input-punctuation-p ;;当要输入的是符号时
                                   ;; rime-predicate-after-ascii-char-p ;;任意英文字符后 ,enable this to use with <s
                                   rime-predicate-current-uppercase-letter-p ;; 将要输入的为大写字母时
                                   rime-predicate-space-after-cc-p ;;在中文字符且有空格之后
                                   ;; for org-fc
                                   org-fc-review-flip-or-rate-mode-p
                                   )
         rime-show-candidate 'posframe
         rime-posframe-properties (list :internal-border-width 1
                                        :font lewis-fixed-font
                                        )
         rime-user-data-dir "~/Documents/rime/"
         rime-inline-ascii-trigger 'shift-r
         ))
(when (eq system-type 'darwin)
  (setq
   ;; rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/" ;; use build-emacs
   rime-emacs-module-header-root "/opt/homebrew/opt/emacs-plus@30/include" ;;use emacs-plus
   rime-librime-root "~/Downloads/librime/dist"
   ))
#+end_src
* File and Browsing
** file browsing
*** dired
#+begin_src elisp
(setup dired
  (setq dired-dwim-target t)
  (:hook dired-hide-details-mode
         ;; dired-omit-mode
         ))
#+end_src
*** dirvish
Dirvish is a minimalistic file manager based on Dired. It's fast
#+begin_src elisp :tangle no
(setup dirvish
  (setq dirvish-attributes '(subtree-state nerd-icons)
        dirvish-side-width 40)
  (:bind "TAB" dirvish-toggle-subtree)
  (add-hook 'dired-load-hook #'dirvish-override-dired-mode)
  (:when-loaded
    (dirvish-side-follow-mode)))
#+end_src
*** nerd-icons-dired
#+begin_src elisp
(setup nerd-icons-dired)
(add-hook 'dired-mode-hook #'nerd-icons-dired-mode)
#+end_src
*** dired-hacks
#+begin_src elisp
(setup dired
  (:with-map dired-mode-map
    (:bind "TAB" #'dired-subtree-toggle))
  )
;; TODO if want to use dired-images, you should install eimp
#+end_src
*** dired-sidebar
#+begin_src elisp
(setup dired-sidebar)
#+end_src
** structure browsing
*** imenu-list
#+begin_src elisp
(setup imenu-list
  (:autoload himenu-list-smart-toggle)
  (setq imenu-list-focus-after-activation nil
           imenu-list-auto-resize t
           imenu-list-position 'left
           imenu-list-auto-update nil
           )
  )
#+end_src
*** boxy-imenu
#+begin_src elisp
(setup boxy)
(setup boxy-imenu)
#+end_src
** tab-line and tab-bar
#+name: tab-bar
#+begin_src elisp
(setup tab-bar
  (setq tab-bar-new-button-show nil
           tab-bar-close-button-show nil)
  (:when-loaded
    (defun tab-bar-select-tab-1st()
      (interactive)
      (tab-bar-select-tab 1))
    (defun tab-bar-select-tab-2nd()
      (interactive)
      (tab-bar-select-tab 2))
    (defun tab-bar-select-tab-3rd()
      (interactive)
      (tab-bar-select-tab 3))
    (defun tab-bar-select-tab-4th()
      (interactive)
      (tab-bar-select-tab 4))
    (defun tab-bar-select-tab-5th()
      (interactive)
      (tab-bar-select-tab 5))
    (defun tab-bar-select-tab-6th()
      (interactive)
      (tab-bar-select-tab 6))
    (defun tab-bar-select-tab-7th()
      (interactive)
      (tab-bar-select-tab 7))
    )
  )
(setup tab-line
  (setq tab-line-new-button-show nil
           tab-line-close-button-show nil)
  ;; (:defer (global-tab-line-mode))
  )
#+end_src
** tabspaces
#+name: tabspaces
#+begin_src elisp
(setup tabspaces
  (setq tabspaces-use-filtered-buffers-as-default t
        tabspaces-keymap-prefix nil)
  (:defer
   (tabspaces-mode)
   )
  (:when-loaded
    (transient-define-prefix tabspaces-leader-map()
      "Define tabspaces leader-key maps"
      [["Create or close"
        ("s" "tabspaces-switch-or-create-workspace" tabspaces-switch-or-create-workspace)
        ("b" "tabspaces-switch-to-buffer" tabspaces-switch-to-buffer)
        ("d" "tabspaces-close-workspace" tabspaces-close-workspace)
        ("k" "tabspaces-remove-selected-buffer" tabspaces-remove-selected-buffer)
        ("K" "tabspaces-kill-buffers-close-workspace" tabspaces-kill-buffers-close-workspace)
        ("o" "tabspaces-open-or-create-project-and-workspace" tabspaces-open-or-create-project-and-workspace)
        ("R" "tabspaces-remove-selected-buffer" tabspaces-remove-selected-buffer)
        ("r" "tab-bar-rename-tab-by-name" tab-bar-rename-tab-by-name)
        ("t" "tabspaces-switch-buffer-and-tab" tabspaces-switch-buffer-and-tab)
        ]
       ["Switch tab bar"
        ("n" "tab-bar-switch-to-next-tab" tab-bar-switch-to-next-tab)
        ("p" "tab-bar-switch-to-prev-tab" tab-bar-switch-to-prev-tab)
        ("l" "tab-bar-switch-to-last-tab" tab-bar-switch-to-last-tab)
        ]
       ["Switch tab bar by index"
        ("1" "tab-bar-select-tab-1st" tab-bar-select-tab-1st)
        ("2" "tab-bar-select-tab-2nd" tab-bar-select-tab-2nd)
        ("3" "tab-bar-select-tab-3rd" tab-bar-select-tab-3rd)
        ("4" "tab-bar-select-tab-4th" tab-bar-select-tab-4th)
        ("5" "tab-bar-select-tab-5th" tab-bar-select-tab-5th)
        ("6" "tab-bar-select-tab-6th" tab-bar-select-tab-6th)
        ("7" "tab-bar-select-tab-7th" tab-bar-select-tab-7th)
        ]
       ]
      )
    (:global "M-1" tab-bar-select-tab-1st
             "M-2" tab-bar-select-tab-2nd
             "M-3" tab-bar-select-tab-3rd
             "M-4" tab-bar-select-tab-4th
             "M-5" tab-bar-select-tab-5th
             "M-6" tab-bar-select-tab-6th
             "M-7" tab-bar-select-tab-7th)
    )
  )
#+end_src
** project
#+begin_src elisp
(setup project
  (:when-loaded
    (add-to-list 'project-find-functions #'project-rootfile-try-detect)
    )
  )
#+end_src
** project-rootfile
#+begin_src elisp
(setup project-rootfile
  (setq project-rootfile-list '(".project"))
  )
#+end_src
* shell
** eshell
#+name: eshell
#+begin_src elisp
(setup eshell)
#+end_src
** eat
#+begin_src elisp
(setup eat
  ;; fix char error on macos
  (when (eq system-type 'darwin)
    (setq eat-term-name "xterm-256color"))
  (:global "C-`" eat-toggle-window)
  (:when-loaded
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'eat-mode)
                             (string-prefix-p "*eat" (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3)))


    )
  (defun eat-toggle-window()
    "Toggle eshell buffer."
    (interactive)
    (if (get-buffer-window "*eat*")
        (delete-window (get-buffer-window "*eat*"))
      (eat)))

  (defun eat-toggle-insert-dir()
    "Toggle eshell buffer."
    (interactive)
      (eat)
      (eat--send-string "*eat*"
                        (concat "cd " (file-name-directory (buffer-file-name))))
      )
  )
#+end_src
* git
** magit
#+begin_src elisp
(setup with-editor)
(setup magit)
#+end_src
** ediff
#+begin_src elisp
(setup ediff
  (setq ediff-split-window-function 'split-window-horizontally
           ediff-window-setup-function 'ediff-setup-windows-plain)
  ;; restore windows Configuration after ediff
  (add-hook 'ediff-before-setup-hook #'ediff-save-window-conf)
  (add-hook 'ediff-quit-hook #'ediff-restore-window-conf)
  (:when-loaded
    (defvar local-ediff-saved-window-conf nil)

    (defun ediff-save-window-conf ()
      (setq local-ediff-saved-window-conf (current-window-configuration)))

    (defun ediff-restore-window-conf ()
      (when (window-configuration-p local-ediff-saved-window-conf)
        (set-window-configuration local-ediff-saved-window-conf)))
    ))

#+end_src
* Program
** Language
*** elisp
**** helpful
#+begin_src elisp
(setup elisp-refs)
(setup helpful
  (:global "C-h f" #'helpful-callable
           "C-h v" #'helpful-variable
           "C-h k" #'helpful-key
           "C-c C-d" #'helpful-at-point
           "C-h F" #'helpful-function
           "C-h C" #'helpful-command))
#+end_src
**** elisp-demos
#+begin_src elisp
(setup elisp-demos
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
*** graphviz-dot-mode
#+begin_src elisp
(setup graphviz-dot-mode
  (:file-match "\\.dot\\'")
  (setq graphviz-dot-indent-width 4)
  )
#+end_src
*** plantuml
This Emacs tool use plantuml to generate images for org, json, yaml files.
#+begin_src elisp

(setup plantuml
  (setq plantuml-output-type "svg"
        plantuml-relative-path "./.temp_images/"
        plantuml-theme "_none_"
        plantuml-font lewis-variable-font
        plantuml-add-index-number t
        plantuml-mindmap-contains-org-content nil
        plantuml-org-headline-bold nil)
  (:autoload plantuml-org-to-mindmap-open
             plantuml-org-to-wbs-open)
  )


;; download plantuml jar
(setq plantuml-jar-path (concat no-littering-var-directory "plantuml.jar"))
(defun plantuml-download-jar ()
  "Download the latest PlantUML JAR file and install it into `plantuml-jar-path'."
  (interactive)
  (if (y-or-n-p (format "Download the latest PlantUML JAR file into %s? " plantuml-jar-path))
      (if (or (not (file-exists-p plantuml-jar-path))
              (y-or-n-p (format "The PlantUML jar file already exists at %s, overwrite? " plantuml-jar-path)))
          (with-current-buffer (url-retrieve-synchronously "https://search.maven.org/solrsearch/select?q=g:net.sourceforge.plantuml+AND+a:plantuml&core=gav&start=0&rows=1&wt=xml")
            (mkdir (file-name-directory plantuml-jar-path) t)
            (let* ((parse-tree (xml-parse-region))
                   (doc        (->> parse-tree
                                    (assq 'response)
                                    (assq 'result)
                                    (assq 'doc)))
                   (strs       (xml-get-children doc 'str))
                   (version    (->> strs
                                    (--filter (string-equal "v" (xml-get-attribute it 'name)))
                                    (car)
                                    (xml-node-children)
                                    (car))))
              (message (concat "Downloading PlantUML v" version " into " plantuml-jar-path))
              (url-copy-file (format "https://search.maven.org/remotecontent?filepath=net/sourceforge/plantuml/plantuml/%s/plantuml-%s.jar" version version) plantuml-jar-path t)
              (kill-buffer)))
        (message "Aborted."))
    (message "Aborted.")))
#+end_src
*** beancount
Emacs major-mode to work with Beancount ledger files
#+begin_src elisp
(setup beancount
  (:file-match "\\.beancount\\'"))
(add-to-list 'auto-mode-alist
             (cons "\\.[pP][dD][fF]\\'" 'eaf-mode))
#+end_src
*** latex
**** basic
#+begin_src elisp
;;  (setup auctex)
(setup cdlatex)
#+end_src
**** org-elp
#+begin_src elisp
(setup org-elp
  (setq org-elp-idle-time 1))
#+end_src
*** python
**** python
#+begin_src elisp
(setup python
  (:with-hook inferior-python-mode-hook
    (:hook (lambda ()
             (process-query-on-exit-flag
              (get-process "Python")))))
  (:when-loaded
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))
    ))
#+end_src
*** scheme
#+begin_src elisp
(setup geiser)
(setup geiser-guile)
#+end_src
*** common lisp slime
#+begin_src elisp
(setup slime
  (setq inferior-lisp-program "sbcl"))
#+end_src
*** cc-mode
#+begin_src emacs-lisp
(setup cc-mode
  (setq c-basic-offset 4))

(setup hideif
  (setq hide-ifdef-shadow t
           hide-ifdef-initially t)
  (:with-feature hide-ifdef-mode
    (:hook-into c-mode c++-mode)))
#+end_src
*** lua-mode
#+begin_src elisp
(setup lua-mode)
#+end_src
*** cmake-mode
#+begin_src elisp
(setup cmake-mode)
#+end_src
** Useful programing tools
*** xref related
**** xref
#+begin_src elisp
(setup xref
  (setq xref-search-program (cond
                             ((executable-find "rg") 'ripgrep)
                             (t 'grep))
        xref-history-storage #'xref-window-local-history)
  (:autoload xref-push-marker-stack)) ;; autoload this command for jump-back
#+end_src
**** xref jump back
borrowed from citre, now you can always jump-back use "M-," after any jump in the list.
#+begin_src elisp
(defun my--push-point-to-xref-marker-stack (&rest r)
  (xref-push-marker-stack (point-marker))) ;; must autoload this command in xref
(dolist (func '(find-function
                consult-imenu
                consult-ripgrep
                consult-line
                consult-find
                find-file
                blink-search
                citre-jump
                consult-goto-line
                isearch-forward))
  (if (fboundp func)
      (advice-add func :before 'my--push-point-to-xref-marker-stack)))
#+end_src
*** UI
**** electric-pair
#+begin_src elisp
(setup elec-pair
  (electric-pair-mode))
#+end_src
**** outli
#+begin_src elisp
(setup outli
  (:hook-into prog-mode)
  (setq outli-allow-indented-headlines t)
  )
#+end_src
*** treesit tools
**** treesit
#+begin_src elisp
(setup treesit
  (setq treesit-font-lock-level 4))
#+end_src
**** treesit-auto
#+begin_src elisp
(setup treesit-auto
  (:defer
   (if (treesit-available-p)
       (require 'treesit-auto)))
  (:when-loaded
    ;; (global-treesit-auto-mode)
    (setq treesit-auto-install t)
    )
  )
#+end_src
*** Complete
**** corfu related
***** corfu
#+begin_src elisp
(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer."
  (when (local-variable-p 'completion-at-point-functions)
    ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

(setup corfu
  (setq corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
        corfu-auto t                 ;; Enable auto completion
        corfu-quit-no-match t        ;; Automatically quit if there is no match
        corfu-preview-current nil    ;; Disable current candidate preview
        corfu-auto-prefix 1
        corfu-auto-delay 0.05
        corfu-scroll-margin 5)        ;; Use scroll margin
  (:with-map corfu-map
    (:bind "<escape>" my-corfu-quit))

  (defun my-corfu-quit()
    "when in corfu-map, quit corfu-selection and return to meow normal mode"
    (interactive)
    (corfu-quit)
    (meow-insert-exit))

  (global-corfu-mode)
  ;; (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  )
(setup corfu-popupinfo
  (:load-after corfu)
  (setq corfu-popupinfo-delay '(0.5 . 0.5))
  (:when-loaded
    (corfu-popupinfo-mode)))

(setup cape
  ;; don't let dabbrev take over all things
  (defalias 'cape-dabbrev-min-2 (cape-capf-prefix-length #'cape-dabbrev 2))
  ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev-min-2)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-file)
  )

#+end_src
***** ispell
#+begin_src elisp
(setup ispell
  (:when-loaded
    ;; if not find ispell-dict, use cape as default
    (if (null ispell-alternate-dictionary)
        (progn
          ;; (add-to-list 'completion-at-point-functions #'cape-dict)
          ;; (setq ispell-alternate-dictionary cape-dict-file)
          (setq ispell-complete-word-dict (concat nowis-doc-emacs-dir "02-binary-files/12-spell-dict/en_US.dict"))))))
#+end_src
***** nerd-icons-corfu
#+begin_src elisp
(setup nerd-icons-corfu
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
**** lsp mode
***** eglot
#+begin_src elisp
(setup project)

(setq read-process-output-max (* 1024 1024))
(setup eglot
  (setq eglot-events-buffer-config'(:size 1000 :format full)
        eglot-workspace-configuration '((:python.analysis :useLibraryCodeForTypes t))
        )
  (:autoload eglot-find-implementation)
  (add-hook 'prog-mode-hook (lambda ()
                              (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
                                (eglot-ensure))))
  (:when-loaded
    (defface new-hi-green
      '((((min-colors 88) (background dark))
         (:background "light green" :foreground "black"))
        (((background dark)) (:background "green" :foreground "black"))
        (((min-colors 88)) (:background "light green"))
        (t (:background "green")))
      "Face for hi-lock mode.")
    (set-face-attribute 'eglot-highlight-symbol-face nil :inherit 'new-hi-green)
    )
  )

(setup eldoc
  (setq eldoc-echo-area-use-multiline-p nil
        eldoc-echo-area-display-truncation-message t))
;; (setq eldoc-echo-area-prefer-doc-buffer nil)
#+end_src
***** eglot in org-src
#+begin_src elisp
(with-eval-after-load 'org
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (eglot-ensure)))
         ;; (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("python" "C++" "C"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang)))
  )
#+end_src
***** consult-eglot
#+begin_src elisp
(setup consult-eglot
  (:load-after eglot)
  (:with-map eglot-mode-map
    (:bind [remap xref-find-apropos] #'consult-eglot-symbols)))
#+end_src
***** eglot-booster
Improve the performance of eglot using a wrapper executable, you should install =emacs-lsp-booster= first
#+begin_src elisp
(setup eglot-booster
    (when (executable-find "emacs-lsp-booster")
    (eglot-booster-mode)
  ))
#+end_src
***** lsp-bridge
install dependencies.
#+begin_src bash
pip3 install epc orjson sexpdata six paramiko
#+end_src
#+begin_src elisp :tangle no
(setup lsp-bridge
  (setq lsp-bridge-enable-org-babel nil
        lsp-bridge-python-lsp-server "pylsp"
        lsp-bridge-enable-completion-in-minibuffer t
        lsp-bridge-enable-hover-diagnostic t
        ;; acm
        acm-enable-citre nil
        acm-enable-codeium nil
        acm-backend-codeium-api-key-path (concat nowis-doc-emacs-dir "08-keys/codeium_api_key.txt")
        )
  (:defer
   (global-lsp-bridge-mode)))
#+end_src
**** citre
Citre is an advanced Ctags (or actually, readtags) frontend for Emacs.
#+begin_src elisp
(setup citre
  (add-hook 'prog-mode (lambda()
                         (require 'citre-config)
                         ))
  (setq citre-use-project-root-when-creating-tags t
        citre-prompt-language-for-ctags-command t
        ;; citre-auto-enable-citre-mode-modes '(prog-mode)
        )
  )
#+end_src
*** debug
**** gdb
#+begin_src elisp
(setup gdb-mi
  (setq gdb-restore-window-configuration-after-quit t)
  )
#+end_src
**** dape
#+begin_src elisp
(setup dape
  (setq dape-buffer-window-arrangment 'right)
  (:global "<f5>"  dape
           "M-<f5>"  dape-transient-map)
  (:when-loaded
    (transient-define-prefix dape-transient-map()
      [["Stepping"
        ("n" "next" dape-next :transient t)
        ("s" "step in" dape-step-in :transient t)
        ("o" "step out" dape-step-out :transient t)
        ("c" "continue" dape-continue :transient t)
        ("p" "pause" dape-pause :transient t)
        ("k" "kill" dape-kill :transient t)
        ("r" "restart" dape-restart :transient t)
        ("D" "disconnect" dape-disconnect-quit :transient t)
        ]
       ["Switch"
        ("m" "memory" dape-read-memory :transient t)
        ("t" "thread" dape-select-thread :transient t)
        ("w" "watch" dape-watch-dwim :transient t)
        ("S" "stack" dape-select-stack :transient t)
        ("i" "info" dape-info :transient t)
        ("R" "repl" dape-repl :transient t)
        ]
       ["Breakpoints"
        ("b" "toggle" dape-breakpoint-toggle :transient t)
        ("l" "log" dape-breakpoint-log :transient t)
        ("e" "expression" dape-breakpoint-expression :transient t)
        ("B" "clear" dape-breakpoint-remove-all :transient t)
        ]
       ["Debug"
        ("d" "dape" dape)
        ("Q" "quit" dape-quit)]])
    )
  )
#+end_src
**** edebug
#+begin_src lisp
(setup edebug
  (:with-map edebug-mode-map
    (:bind "n" edebug-step-mode
           "N" edebug-next-mode
  )))
#+end_src

*** Code toggle with hideshow, hideif
#+begin_src elisp
(setup hideshow
  (:with-hook prog-mode-hook
    (:hook hs-minor-mode))
  (add-to-list 'hs-special-modes-alist '(verilog-mode "\\(\\<begin\\>\\|\\<case\\>\\|\\<module\\>\\|\\<class\\>\\|\\<function\\>\\|\\<task\\>\\)"
                                                      )))

;; (setup hideif
;;   (add-hook 'c-mode-common-hook
;;             (lambda ()
;;               (hide-ifdef-mode)
;;               (add-hook 'after-save-hook (lambda () (hide-ifdefs))))))
#+end_src
*** format-all
#+begin_src elisp
(setup inheritenv)
(setup language-id)
(setup format-all)
#+end_src
*** disaster
Disassemble C, C++ or Fortran code under cursor
#+begin_src elisp
(setup disaster
  (setq disaster-objdump "objdump -d -M att -Sl --no-show-raw-insn"))
#+end_src

*** jupyter
#+begin_src elisp :tangle no
(setup websocket)
(setup zmq)
(setup simple-httpd)
(setup jupyter
  (setenv "PYDEVD_DISABLE_FILE_VALIDATION" "1") ;; to solve (json-number-format 5) problems because it fails to separate from stdout,
  )
#+end_src
*** compile
#+begin_src elisp
(setup compile
  (setq compile-command "cd build && make && ./test"))
#+end_src
* Org Mode
** org-mode
#+begin_src elisp
(setup org
  (setq org-adapt-indentation nil
        org-startup-indented t
        org-startup-with-inline-images t
        org-startup-numerated nil
        org-startup-folded 'content
        org-edit-src-content-indentation 0
        org-imenu-depth 8
        org-return-follows-link t
        org-id-link-to-org-use-id t ;; Create an ID if needed to make a link to the current entry.

        org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                               (vm-imap . vm-visit-imap-folder-other-frame)
                               (gnus . org-gnus-no-new-news)
                               (file . find-file)
                               (wl . wl-other-frame))
        ;; org-blank-before-new-entry '((heading . t)
        ;;                              (plain-list-item . auto))

        org-image-actual-width 800 ;; this will use 600 for width for all the images.
        org-preview-latex-image-directory (concat no-littering-var-directory "ltximg/")
        org-confirm-babel-evaluate nil
        org-plantuml-jar-path plantuml-jar-path
        org-special-ctrl-a/e t
        org-attach-id-dir (concat nowis-doc-emacs-dir "02-binary-files/01-pictures/01-org-attach")
        org-src-window-setup 'split-window-below

        ;; habit
        org-habit-following-days 2
        system-time-locale "C" ;; ensure time format is always english
        ;; todo keywords
        ;; org-todo-keywords (quote ((sequence "TODO(t!/!)" "NEXT(n!/!)" "|" "DONE(d!/!)")
        ;;                           (type "PROJECT(p!/!)" "|" "DONE_PROJECT(D!/!)")
        ;;                           (type "SOMEDAY(S!)" "|" "NEED_COLLECTED(N!)")
        ;;                           (sequence "WAIT(w@/!)" "|" "CANCELLED(c@/!)")))
        org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
                                       ("NEXT" :foreground "blue" :weight bold)
                                       ("DONE" :foreground "forest green" :weight bold)
                                       ("PROJECT" :foreground "red" :weight bold)
                                       ("DONE_PROJECT" :foreground "forest green" :weight bold)
                                       ("SOMEDAY" :foreground "orange" :weight bold)
                                       ("NEED_COLLECTED" :foreground "orange" :weight bold)
                                       ("WAIT" :foreground "orange" :weight bold)
                                       ("CANCELLED" :foreground "forest green" :weight bold)
                                       ))
        ;; save state changes into logbook
        org-log-state-notes-into-drawer t
        )
  (:when-loaded
    (require 'org-tempo) ;; so that <s is useful
    ;; 导出相关的设置
    (setq org-latex-pdf-process '("tectonic %f"))
    (plist-put org-format-latex-options :scale 2.0) ;; use a large preview for latex
    ;; (setq org-preview-latex-default-process 'dvisvgm)

    ;; emphasis
    (defface my-org-emphasis-bold
      '((default :inherit bold)
        (((class color) (min-colors 88) (background light))
         :foreground "pale violet red")
        (((class color) (min-colors 88) (background dark))
         :foreground "pale violet red"))
      "My bold emphasis for Org.")

    (defface my-org-emphasis-italic
      '((default :inherit italic)
        (((class color) (min-colors 88) (background light))
         :foreground "green3")
        (((class color) (min-colors 88) (background dark))
         :foreground "green3"))
      "My italic emphasis for Org.")

    (defface my-org-emphasis-underline
      '((default :inherit underline)
        (((class color) (min-colors 88) (background light))
         :foreground "#813e00")
        (((class color) (min-colors 88) (background dark))
         :foreground "#d0bc00"))
      "My underline emphasis for Org.")

    (setq org-emphasis-alist
          '(("*" my-org-emphasis-bold)
            ("/" my-org-emphasis-italic)
            ("_" underline)
            ("=" org-verbatim verbatim)
            ("~" org-code verbatim)
            ("+" (:strike-through t))
            ))

    ;; dynamic load org-src modules to accelerate speed
    (defun my/org-babel-execute-src-block (&optional _arg info _params)
      "Load language if needed"
      (let* ((lang (nth 0 info))
             (sym (cond ((member (downcase lang) '("c" "cpp" "c++")) 'C)
                        ((member (downcase lang) '("jupyter-python")) 'jupyter)
                        (t (intern lang))))
             (backup-languages org-babel-load-languages))
        (unless (assoc sym backup-languages)
          (condition-case err
              (progn
                (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t)))
                (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages)))
            (file-missing
             (setq-default org-babel-load-languages backup-languages)
             err)))))
    (advice-add 'org-babel-execute-src-block :before #'my/org-babel-execute-src-block )


    ;; didn't redisplay for now
    ;; (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

    ;; export and open word
    (add-to-list 'org-file-apps '("\\.docx\\'" . default))
    (add-to-list 'org-structure-template-alist
                 '("jp" . "src jupyter-python :async yes :kernel python3 :session py"))
    (defun lewis/org-export-docx ()
      (interactive)
      (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
            (template-file (concat nowis-doc-emacs-dir
                                   "02-binary-files/template.docx")))
        (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                               (buffer-file-name)
                               docx-file
                               template-file
                               ))
        (message "Convert finish: %s" docx-file)))

    (dolist (face '((org-level-1 . 1.4)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.4)
                    (org-level-4 . 1.4)
                    (org-level-5 . 1.4)
                    (org-level-6 . 1.4)
                    (org-level-7 . 1.4)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'medium :height (cdr face)))

    ;; org-src-lang-modes
    (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; for zotero annotations parser
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (defun org-zotero-open (path)
      (browse-url (format "zotero:%s" path)))
    (org-link-set-parameters "zotero" :follow #'org-zotero-open)

    (defun parser-zotero-annotation-to-org-mode()
      (interactive)
      (while (re-search-forward "“\\([.]*\n*.*\\)” (\\[\\(.*\\)\\](zotero://selec.*)) (.*(\\(zotero.*\\)))" nil t)
        (let ((begin (match-beginning 1))
              (end (match-end 3))
              (note (match-string 1))
              (title (match-string 2))
              (location (match-string 3))
              )
          (delete-region (1- begin) (+ 2 end)) ;; full region
          (insert (format "** %s\n%s" title note))
          (org-set-property "zotero" location)
          (org-set-property "ref" title)

          ;; for anki
          (org-set-tags "wait_for_cloze") ;; for article
          ;; (org-set-property "ANKI_DECK" "Default::2") ;; default with 0.9 mem rate
          ;; (org-set-property "ANKI_NOTE_TYPE" "Cloze")

          ;; for org-fc
          (if (not (featurep 'org-fc))
              (require 'org-fc))
          (org-fc-type-normal-init)
          )))
    ))
#+end_src
** ui
*** org mode basic style
#+begin_src elisp
(setup org
  (setq org-auto-align-tags nil
        org-tags-column 0
        org-ellipsis "⤵"
        org-hide-emphasis-markers t
        org-pretty-entities nil ;; can perfor ui such as "a_words" into small "awords"
        org-habit-graph-column 50
        ;; Agenda styling
        org-agenda-tags-column 0
        ))
#+end_src
*** org-modern
#+begin_src elisp
(setup org-modern
  (setq org-modern-star 'replace
        org-modern-replace-stars '("Ⓐ" "Ⓑ" "Ⓒ" "Ⓓ" "Ⓔ" "Ⓕ" "Ⓖ" "Ⓗ" "Ⓘ" "Ⓙ" "Ⓚ" "Ⓛ" "Ⓜ")
        org-modern-table t

        )
  (:hook-into org-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
  (:when-loaded
    ;; (set-face-attribute 'org-block-begin-line nil :underline nil :overline t)
    ;; (set-face-attribute 'org-block-end-line nil :overline nil :underline t)
    ))
#+end_src
*** org-appear
#+begin_src elisp
(setup org-appear
  (:hook-into org-mode))
#+end_src
** org-download
#+begin_src elisp
(setup async)
(setup org-download
  (setq org-download-method 'directory
           org-download-screenshot-basename "screenshot.jpg"
           org-download-image-dir (concat nowis-doc-emacs-dir "02-binary-files/01-pictures/org_download_images")
           org-download-abbreviate-filename-function 'expand-file-name)
  (:when-loaded
    (when (eq system-type 'gnu/linux)
      (setq-default org-download-screenshot-method "scrot -s %s"))

    (when (eq system-type 'darwin)
      (setq org-download-screenshot-method "screencapture -i %s")))
  (:autoload org-download-screenshot
             org-download-yank))
#+end_src
** ox-hugo
#+begin_src elisp
(setup tomelr)
(setup ox-hugo
  (:load-after ox))
#+end_src
** weblorg
#+begin_src elisp
(setup templatel)
(setup weblorg)
#+end_src
** org-clock
*** org-pomodoro
#+begin_src elisp :tangle no
(setup alert)
(setup org-pomodoro
  (setq org-pomodoro-finished-sound (concat nowis-doc-emacs-dir "02-binary-files/applaud.wav")))
#+end_src
** org-noter
#+begin_src elisp
(setup org-noter
  (setq org-noter-notes-search-path (concat nowis-doc-emacs-dir "02-binary-files/02-searchable/01-papers-markable/")
           org-noter-auto-save-last-location t
           org-noter-separate-notes-from-heading nil
           org-noter-hide-other nil
           org-noter-doc-split-percentage '(0.6 . 0.4)
           org-noter-highlight-selected-text t
           )
  ;; (:when-loaded
  ;;   (require 'org-noter-pdf)
  ;;   (require 'org-noter-nov)
  ;;   (require 'org-noter-nov-overlay)
  ;;   (require 'org-noter-dynamic-block))
  )
#+end_src
** org-present
#+begin_src elisp
(setup org-present)
#+end_src
** bibtex related
*** bibtex
#+begin_src elisp
(setup bibtex
  (setq bibtex-autokey-year-length 4
           bibtex-autokey-titleword-separator "_"
           bibtex-autokey-name-year-separator "_"
           bibtex-autokey-year-title-separator "_"
           bibtex-autokey-titleword-length 15
           bibtex-autokey-titlewords 10
           bibtex-autokey-titleword-ignore ;; I took "On" out of this
           '("A" "An" "The" "Eine?" "Der" "Die" "Das")))

(defun do.refs/get-db-file-list ()
  "Get the list of all the bib files containing my bib database."
  (if (file-exists-p nowis-bib-dir)
      (directory-files-recursively nowis-bib-dir "\\.bib\\'" t)
    nil))
#+end_src
*** citar
#+begin_src elisp
(setup parsebib)
;; (setup citeproc) ;;<- (setup queue) (setup string-inflection)
(setup citar
  (setq org-cite-global-bibliography (do.refs/get-db-file-list)
           org-cite-insert-processor 'citar
           org-cite-follow-processor 'citar
           org-cite-activate-processor 'citar
           citar-library-paths (list nowis-bib-pdf-dir)
           citar-bibliography org-cite-global-bibliography))
#+end_src
*** citar-denote
#+begin_src elisp
(setup citar-denote
  (setq citar-denote-title-format "title")
  (:defer
  (citar-denote-mode)))
#+end_src
*** ebib
#+begin_src elisp
(setup ebib
  (setq ebib-preload-bib-files org-cite-global-bibliography
           ebib-file-search-dirs (list nowis-bib-pdf-dir)
           ebib-bib-search-dirs (list nowis-bib-dir)
           ebib-default-directory 'first-bib-dir
           ebib-file-associations '(("pdf")
                                    ("ps" . "gv")
                                    ("epub"))
           ebib-index-window-size 25
           ebib-index-columns '(("Score" 2 t)
                                ("Year" 6 t)
                                ("Author/Editor" 40 t)
                                ("Title" 100 t)
                                ;; ("Entry Key" 40 t)
                                )
           ebib-reading-list-file (concat nowis-doc-emacs-dir "01-orgmode/xnotes/20230403T125743--ebib-reading-lists.org")
           ebib-use-timestamp t
           ebib-bibtex-dialect 'biblatex
           ebib-create-backups nil
           )
  )
#+end_src
*** zotra
**** a installation script
#+begin_src bash
cd ~/Downloads
git clone --recurse-submodules https://github.com/mpedramfar/zotra-cli.git
cd zotra-cli
npm install .
cd ~/Downloads
git clone https://github.com/l0o0/translators_CN.git --depth=1
rm -rf ~/Downloads/zotra-cli/module/translation-server/modules/translators
ln -s ~/Downloads/translators_CN/translators ~/Downloads/zotra-cli/module/translation-server/modules/
#+end_src
**** config
#+begin_src elisp :tangle no
(setup zotra
  (:autoload zotra-add-entry-from-url)
  (if (eq system-type 'darwin)
      (setq zotra-cli-command '("node" "/Users/liuyi/Downloads/zotra-cli/bin/index.js")))
  (if (eq system-type 'gnu/linux)
      (setq zotra-cli-command '("node" "/home/lewisliu/Downloads/zotra-cli/bin/index.js"))))
#+end_src
** toc-org
#+begin_src elisp
(setup toc-org
  (:hook-into org-mode))
#+end_src
** denote and related
*** denote
#+begin_src elisp
(setup denote
  (setq denote-directory (expand-file-name (concat nowis-doc-emacs-dir "01-orgmode/xnotes"))
        denote-dired-directories (ffap-all-subdirs denote-directory)
        denote-date-prompt-use-org-read-date t
        denote-modules '(project)
        denote-prompts '(title keywords signature template)
        denote-dired-directories-include-subdirectories t
        ;; journal
        denote-journal-extras-title-format 'day-date-month-year
        )
  ;; (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  (setq denote-templates
        `((default . ,(concat "* Action\n"
                           "** What will change\n"
                           "** How to get this\n\n"
                           "* Ideas\n"
                           "** Why got this\n"
                           "** What I think\n\n"
                           "* Sealed"))
        (action . ,(concat "* Destination\n\n"
                           "* Roadmap\n\n"
                           "* Action\n\n"
                           "* Warnings\n\n"
                           "* Links\n\n"))))
  ;; should add a hook for disable diredfl-mode
  )
#+end_src
*** denote-lumn
Borrowed from https://github.com/protesilaos/denote/issues/115
#+begin_src elisp
(setq find-dired-refine-function nil)  ;; This needs to be set globally, find-dired works asynchronously.

(defun my/zettel-signature-topics()
  (interactive)
  (if (not (featurep 'find-dired))
      (require 'find-dired))
  (let ((find-ls-option '(" -exec ls -ld {} \\+| awk /==/ |sort -t '=' -k 3" . "-ld")))
    (find-dired denote-directory ""))
  (rename-buffer "signatured")
  )

(defun my/zettel-not-signatured-topics ()
  (interactive)
  (let ((find-ls-option '("-exec ls -ld {} \\+ |grep -v '=='| sort -t '=' -k 3" . "-ld")))
    (find-dired denote-directory ""))
  (rename-buffer "not signatured"))

(defun my/zettel-main-topics ()
  (interactive)
  (let ((find-ls-option '("-regex '.*==[0-9]+-.*'  -exec ls -ld {} \\+| awk /==/ | sed  's/--/=@/3' | sort -t '=' -Vk 3,3 | sed 's/=@/--/'" . "-ld")))
    (find-dired denote-directory "")))
#+end_src
*** denote-folgezettel
Emacs package to create and navigate denote notes with folgezettel numbering in the signature.
#+begin_src elisp :tangle no
(setup denote-fz)
#+end_src
*** denote-explorer
#+begin_src elisp
(setup denote-explore)
#+end_src
** find orgmode dir files
#+begin_src elisp
(defun project-find-papers-dir-files ()
  (interactive)
  (dired (concat nowis-doc-emacs-dir "02-binary-files/02-searchable/01-papers-markable"))
  (project-find-file t))
(defun project-find-searchable-dir-files ()
  (interactive)
  (dired (concat nowis-doc-emacs-dir "02-binary-files/02-searchable"))
  (project-find-file t))
(defun project-find-gtd-dir-files ()
  (interactive)
  (dired nowis-gtd-dir)
  (project-find-file t))
#+end_src
** org-imagine, excalidraw
#+begin_src elisp
(defvar org-excalidraw--default-base
  "{
    \"type\": \"excalidraw\",
    \"version\": 2,
    \"source\": \"https://excalidraw.com\",
    \"elements\": [],
    \"appState\": {
      \"gridSize\": null,
      \"viewBackgroundColor\": \"#ffffff\"
    },
    \"files\": {}
  }
"
  "Get default JSON template used for new excalidraw files."
  )

(defun lewis-create-excalidraw()
  (interactive)
  (let* ((filename (concat (car (split-string (buffer-name) "\\.")) ".excalidraw"))
         (path (concat nowis-doc-emacs-dir "05-excalidraw/" filename))
         (link (format "[[file:%s]]" path)))
    (insert link)
    (with-temp-file path (insert org-excalidraw--default-base))))

;; (setup org-imagine)
#+end_src
** ob-d2
Org-Babel support for evaluating d2 diagram scripting language.
#+begin_src elisp
(setup ob-d2)
#+end_src
** auto-insert
#+begin_src elisp
(setup autoinsert
  (:defer
   (auto-insert-mode t))

   ;; Get default JSON template used for new excalidraw files.
  (define-auto-insert "\\.excalidraw\\'"
    (lambda ()
      (insert
       "{
    \"type\": \"excalidraw\",
    \"version\": 2,
    \"source\": \"https://excalidraw.com\",
    \"elements\": [],
    \"appState\": {
      \"gridSize\": null,
      \"viewBackgroundColor\": \"#ffffff\"
    },
    \"files\": {}
}
"
       )))
  )
#+end_src
** org-remark
Highlight and annotate any text file with using Org mode.
#+begin_src elisp
(setup org-remark
  (defun my/function ()
    (concat (concat nowis-doc-emacs-dir "01-orgmode/org-remark/")
            (file-name-base (org-remark-notes-file-name-function))
            ".org"))
  (setq org-remark-notes-file-name #'my/function)
  (add-hook 'after-init-hook 'org-remark-global-tracking-mode)
  (:when-loaded
    ;; Optional if you would like to highlight websites via eww-mode
    (with-eval-after-load 'eww
      (org-remark-eww-mode +1))

    ;; Optional if you would like to highlight EPUB books via nov.el
    (with-eval-after-load 'nov
      (org-remark-nov-mode +1))

    ;; Optional if you would like to highlight Info documentation via Info-mode
    (with-eval-after-load 'info
      (org-remark-info-mode +1))
    ))
#+end_src
** clue
Connecting clues while reading code.
#+begin_src elisp
(setup clue)
#+end_src
** org-transclusion
#+begin_src elisp
(setup org-transclusion)
#+end_src
** agenda/gtd
Borrowed from https://github.com/rougier/emacs-GTD

In short, you will need 3 files:
1. =index.org= for capture inbox todos
2. =agenda.org= for recurrent events
3. =action.org= for all tasks moving from inbox
My useage for =action.org=:
#+begin_example
+ Single #single
++ Notes
++ Tasks
+ Project #project
++ Notes
++ Tasks
#+end_example
#+begin_src elisp
;; Files
(setq org-directory "~/Documents/emacs/01-orgmode/xnotes")
(setq org-agenda-files
      (mapcar 'file-truename
              (file-expand-wildcards (concat org-directory "/gtd/*.org"))))

;; Capture
(setq org-capture-templates
      `(("i" "Inbox" entry  (file "inbox.org")
         ,(concat "* TODO %?\n"
                  "/Entered on/ %U"))       ("m" "Meeting" entry  (file+headline "agenda.org" "Future")
         ,(concat "* %? :meeting:\n"
                  "<%<%Y-%m-%d %a %H:00>>"))
                  ("n" "Note" entry  (file "notes.org")
                   ,(concat "* Note (%a)\n"
                            "/Entered on/ %U\n" "\n" "%?"))
                  ("@" "Inbox [mu4e]" entry (file "inbox.org")
                   ,(concat "* TODO Reply to \"%a\" %?\n"
                            "/Entered on/ %U"))))

(defun org-capture-inbox ()
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture nil "i"))

(defun org-capture-mail ()
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture nil "@"))

;; Use full window for org-capture
;; (add-hook 'org-capture-mode-hook 'delete-other-windows)

;; Key bindings

;; Only if you use mu4e
;; (require 'mu4e)
;; (define-key mu4e-headers-mode-map (kbd "C-c i") 'org-capture-mail)
;; (define-key mu4e-view-mode-map    (kbd "C-c i") 'org-capture-mail)

;; Refile
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-targets
      '(("action.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
        ("incubate.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
        ))
;; (setq org-refile-targets
;;       '(("action.org" :level . 2)))

;; TODO
(setq org-log-done 'time)
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)")))
(defun log-todo-next-creation-date (&rest ignore)
  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
(add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

;; Agenda
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ;; ((org-agenda-skip-function
                  ;;   '(org-agenda-skip-entry-if 'deadline))
                  ;;  (org-deadline-warning-days 0))
                  )
          (todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (tags-todo "+action-TODO=\"NEXT\""
                     ((org-agenda-prefix-format "  %-12:c [%e] ")
                      (org-agenda-overriding-header "\nAvailiable Action\n")))
          ;; (agenda nil
          ;;         ((org-agenda-entry-types '(:deadline))
          ;;          (org-agenda-format-date "")
          ;;          (org-deadline-warning-days 7)
          ;;          (org-agenda-skip-function
          ;;           '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
          ;;          (org-agenda-overriding-header "\nDeadlines")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))
          (tags "CLOSED>=\"<-1w>\""
                ((org-agenda-overriding-header "\nCompleted last 7 days")))
          ))))

;; agenda clockreport
(setq org-agenda-start-with-clockreport-mode t
      org-agenda-clockreport-parameter-plist '(:link t :maxlevel 5)
      org-clock-out-remove-zero-time-clocks t)
;; agenda style
(setq org-agenda-hide-tags-regexp ".")
;; Save the corresponding buffers
(defun gtd-save-org-buffers ()
  "Save `org-agenda-files' buffers without user confirmation.
See also `org-save-all-org-buffers'"
  (interactive)
  (message "Saving org-agenda-files buffers...")
  (save-some-buffers t (lambda ()
                         (when (member (buffer-file-name) org-agenda-files)
                           t)))
  (message "Saving org-agenda-files buffers... done"))

;; Add it after refile
(advice-add 'org-refile :after
            (lambda (&rest _)
              (gtd-save-org-buffers)))
#+end_src
** org-agenda-property
#+begin_src elisp
(setup org-agenda-property
  (:load-after org)
  (setq org-agenda-property-list '("GAIN"))
  (setq org-agenda-property-column 0)
  (setq org-agenda-property-position 'where-it-fits)
  )
#+end_src
** org-ql
#+begin_src elisp :tangle no
(setup ts)
(setup ht)
(setup org-super-agenda)
(setup ov)
(setup org-ql
  (defun lewis/find-read-articles()
          (interactive)
          (org-ql-search (directory-files-recursively org-directory (rx ".org"))
            '(and (property "zotero") (not (property "ANKI_NOTE_ID"))))

          )
  )
#+end_src
** mpvi
Integrate Org with Video
#+begin_src elisp
(setup mpvi
  (setq mpvi-bilibili-enable-danmaku nil)
  (setq mpvi-ytdlp-extra-args "--cookies-from-browser firefox")
  )
#+end_src
** org-fc
Spaced Repetition System for Emacs org-mode
#+begin_src elisp
(setup org-fc
  (setq org-fc-directories (list denote-directory)
        org-fc-review-history-file (concat nowis-doc-emacs-dir "org-fc-reviews.tsv")
        ;; org-fc-shuffle-positions nil
        )
  (:with-map org-fc-review-rate-mode-map
    (:bind "RET" org-fc-review-rate-good
           ))
  (:when-loaded
    (set-face-attribute 'org-fc-type-cloze-hole-face nil :box t)

    (require 'org-fc-keymap-hint)
    (add-hook 'org-fc-review-flip-mode-hook 'meow-motion-mode)
    (add-hook 'org-fc-review-edit-mode-hook 'meow-normal-mode)
    (add-hook 'org-fc-review-rate-mode-hook 'meow-motion-mode)

    (defun org-fc-timestamp-in (interval)
      "Generate an `org-mode' timestamp shanghai INTERVAL days from now."
      (let ((seconds (* interval 60 60 24))
            (now (time-to-seconds)))

        (format-time-string
         "%FT%TZ"
         (seconds-to-time  (time-to-seconds)  )
         "Asia/Shanghai")))
    )
  ;; outside functions
  (defun org-fc-review-flip-or-rate-mode-p()
    "return t if inside flip or rate mode"
    (if (or (bound-and-true-p org-fc-review-flip-mode)
            (bound-and-true-p org-fc-review-rate-mode))
        t
      nil))
  (transient-define-prefix org-fc-transient-map()
    "Define transient-key map for org-fc functions"
    [
     ["update"
      ("f" "find dashboard" org-fc-dashboard)
      ("r" "review-all" org-fc-review-all)
      ("R" "resume" org-fc-review-resume)
      ("b" "review-buffer-hierachy" org-fc-review-buffer-hierarchy)
      ]
     ["init"
      ("c" "cloze" org-fc-type-cloze-init)
      ("d" "double" org-fc-type-double-init)
      ("n" "normal" org-fc-type-normal-init)
      ("t" "text input" org-fc-type-text-input-init)]])

  (defun org-fc-review-buffer-hierarchy()
    "org-fc review current buffer with hierachy"
    (interactive)
    (progn
      (setq-local org-fc-shuffle-positions nil)
      (org-fc-review-buffer)))

  (defun org-fc-transient-load-map()
    (interactive)
    (if (not (featurep 'org-fc))
        (require 'org-fc))
    (org-fc-transient-map))
  )
#+end_src
** anki-helper
#+begin_src elisp
(setup htmlize)
(setup anki-helper
  (setq anki-helper-cloze-use-emphasis 'bold
        ;; anki-helper-default-note-type "Cloze" ;; use zotero scipts to set this
  )
  )

#+end_src
** shrface
Extend eww/nov with org-mode features, archive web pages to org files with shr.
#+begin_src elisp
(setup shrface
  (add-hook 'nov-mode-hook #'shrface-mode)
  (add-hook 'eww-mode-hook #'shrface-mode)
  (:when-loaded
    (shrface-basic)
    (shrface-trial)
    (shrface-default-keybindings) ; setup default keybindings
    (setq shrface-href-versatile t)
    (setq nov-shr-rendering-functions '((img . nov-render-img) (title . nov-render-title)))
    (setq nov-shr-rendering-functions (append nov-shr-rendering-functions shr-external-rendering-functions))
    (setq shrface-bullets-bullet-list org-modern-replace-stars) ;;should load after org-modern
    )
  (:hook (lambda()(
                   if  (featurep 'org)
                       (org-indent-mode -1))))
  )
#+end_src
** org-mind-map
This is an Emacs package that creates graphviz directed graphs from the headings of an org file
#+begin_src elisp
(setup org-mind-map
  (:when-loaded
    ;; (require 'ox-org)
    (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    (add-to-list 'org-mind-map-default-graph-attribs '("fontname" . "Maple Mono SC F"))
    ))
(defun org-mind-map-dwim()
  "Write current tree, load ox-org if unload"
  (interactive)
  (unless (featurep 'ox-org) (require 'ox-org))
  (make-local-variable 'org-mind-map-dot-output)
  (setq org-mind-map-dot-output '("pdf"))
  (org-mind-map-write-current-tree)
  (kill-local-variable 'org-mind-map-dot-output)
  )
(defun org-mind-map-choose-type-dwim()
  "Write current tree, load ox-org if unload"
  (interactive)
  (unless (featurep 'ox-org) (require 'ox-org))
  (org-mind-map-write-current-tree))

(defvar save-mind-map-minor-mode nil
  "A flag indicating whether the minor mode is enabled or not.")

(defun org-mind-map-print()
  "Write current tree, load ox-org if unload"
  (unless (featurep 'ox-org) (require 'ox-org))
  (make-local-variable 'org-mind-map-dot-output)
  (setq org-mind-map-dot-output '("pdf"))
  (org-mind-map-write-current-tree)
  (kill-local-variable 'org-mind-map-dot-output)
  )

(define-minor-mode save-mind-map-minor-mode
  "Toggle save org mind map minor mode."
  :init-value nil
  :lighter " MindMap"
  :global nil
  (if save-mind-map-minor-mode
      (add-hook 'after-save-hook #'org-mind-map-print t t)
    (remove-hook 'after-save-hook #'org-mind-map-print t)))
#+end_src
* english 翻译
** go-translate
Powerful translator on Emacs. Supports multiple translation engines such as Google, Bing, deepL, StarDict, Youdao.
#+begin_src elisp
(setup go-translate
  (setq gt-translate-list '(("en" "zh"))
        gts-supress-warning t
        )
  (:global "M-L" gt-do-translate)
  (:global "M-l" gt-quick-sdcv)

  (:when-loaded
    (setq gt-default-translator (gt-translator
                                 :taker (gt-taker :langs '(en zh) :text 'sentence :prompt 'buffer)
                                 :engines (list
                                           (gt-bing-engine)
                                           ;; (gt-google-engine)
                                           )
                                 :render (gt-buffer-render)))
    )
  (defun gt-quick-sdcv ()
    (interactive)
    (if (not (featurep 'go-translate))
        (require 'go-translate)
      (gt-start (gt-translator
                 :taker (gt-taker :langs '(en zh) :text 'word)
                 :engines (gt-stardict-engine)
                 :render (gt-buffer-render))))

    ))
#+end_src
If you want to use *sdcv* for offline translate, then download dictionary data to ~/.stardict/dic or /usr/share/stardict/dic:
#+begin_src sh
# For example from http://download.huzheng.org:
mkdir -p ~/.stardict/dic
cd ~/.stardict/dic
wget http://download.huzheng.org/zh_CN/stardict-langdao-ce-gb-2.4.2.tar.bz2
wget http://download.huzheng.org/zh_CN/stardict-langdao-ce-gb-2.4.2.tar.bz2
tar xvf stardict-langdao-ec-gb-2.4.2.tar.bz2
tar xvf stardict-langdao-ce-gb-2.4.2.tar.bz2
sdcv -l
#+end_src
** immersive-translate
immersive-translate: Immersive Bilingual Translation
#+begin_src elisp
(setup immersive-translate)
(add-hook 'elfeed-show-mode-hook #'immersive-translate-setup)
(add-hook 'nov-pre-html-render-hook #'immersive-translate-setup)
;; use translate-shell
(setq immersive-translate-backend 'trans
     immersive-translate-trans-engine "bing"
      )
#+end_src
* 阅读
** pdf-tools
#+begin_src elisp
(setup tablist)
(setup pdf-tools
  (setq pdf-view-use-scaling t
           pdf-annot-list-format '((page . 3)
                                   (type . 10)
                                   (contents . 56)
                                   (date . 24)))
  (:with-map pdf-view-mode-map
    (:bind "h h" pdf-annot-add-highlight-markup-annotation
           "[" pdf-view-scroll-down-or-previous-page
           "]" pdf-view-scroll-up-or-next-page))
  (pdf-loader-install)
  )
;; (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)

(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src
** pdf-view-pagemark
#+begin_src elisp
(setup pdf-view-pagemark
  (:hook-into pdf-view-mode-hook))
#+end_src
** elfeed
#+begin_src elisp
(setup elfeed
  (setq elfeed-show-entry-switch 'display-buffer))
#+end_src
** efleed-org
#+begin_src elisp
(setup elfeed-org
  (with-eval-after-load 'no-littering
    (setq rmh-elfeed-org-files (list (concat nowis-config-useful-tools "elfeed.org"))))
  )
(defun my-elfeed()
  (interactive)
  (unless (featurep 'elfeed-org)
    (elfeed-org))
  (elfeed))
#+end_src
** nov
#+begin_src elisp
(setup esxml) ;; <- (setup kv)
(setup nov
  (:bind "]" nov-scroll-up
         "[" nov-scroll-down)
  (:file-match "\\.epub\\'"))
#+end_src
** nov-xwidget
#+begin_src elisp
(setup nov-xwidget
  (:load-after nov)
  (:with-map nov-xwidget-webkit-mode-map
    (:bind "n" 'nov-xwidget-next-document
           "p" 'nov-xwidget-previous-document
           "]" 'nov-xwidget-next-document
           "[" 'nov-xwidget-previous-document
           "t" 'nov-xwidget-goto-toc
           "S" 'nov-xwidget-find-source-file))
  (:when-loaded
    (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
    (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files)))
#+end_src
** darkroom
Simple distraction-free editing. I use darkroom instead of writeroom because it's more simple
#+begin_src elisp
(setup darkroom)
#+end_src
** markdown-mode
#+begin_src elisp
(setup markdown-mode
  (:file-match "\\.md\\'"))
#+end_src
** markdown-xwidget
#+begin_src elisp :tangle no
(setup mustache)
(setup ht)
(setup markdown-xwidget)
#+end_src
* tools
** xwidget and browser
#+begin_src elisp
(defun lewis/url-browser-new-buffer(url &optional new-session)
  (interactive (progn
                 (require 'browse-url)
                 (browse-url-interactive-arg "xwidget-webkit URL: ")))
  (xwidget-webkit-browse-url url t))

;; now use eww
;; (setq browse-url-browser-function 'lewis/url-browser-new-buffer)
;; (setq browse-url-browser-function 'eww-browse-url)
#+end_src
** eaf
#+begin_src elisp :tangle no
(setup eaf
  (add-to-list 'load-path "~/.emacs.d/lib/eaf")
  (setq eaf-browser-enable-autofill t
        eaf-webengine-font-family lewis-variable-font
        eaf-webengine-serif-font-family lewis-variable-font
        eaf-webengine-fixed-font-family lewis-fixed-font
        eaf-config-location (concat no-littering-var-directory "eaf/")
        ;; proxy
        eaf-proxy-type "http"
        eaf-proxy-host "127.0.0.1"
        eaf-proxy-port "7890"
        )
  (if (eq system-type 'darwin)
      (setq eaf-python-command "~/.pyenv/shims/python3"))
  ;; (if (eq system-type 'gnu/linux)
  ;; (require 'eaf)
  ;; )
  )

(setup eaf-browser
  (:autoload eaf-open-browser)
  )
(setup eaf-pdf-viewer
  (setq eaf-pdf-scroll-ratio 0.1)
  (:autoload eaf-open-pdf-from-history))
(setup eaf-rss-reader
  (:autoload eaf-open-rss-reader))
(setup eaf-map
  (:autoload eaf-open-map))
(setup eaf-markdown-previewer)
(setup eaf-markmap)

(setup eaf-interleave
  (setq eaf-interleave-org-notes-dir-list (list (concat nowis-doc-emacs-dir "01-orgmode/") ".")
        eaf-interleave-disable-narrowing t
        eaf-interleave-split-lines 20
        eaf-find-alternate-file-in-dired t
        )
  (:bind "M-."  'eaf-interleave-sync-current-note
         "M-p"  'eaf-interleave-sync-previous-note
         "M-n"  'eaf-interleave-sync-next-note)
  (:with-map eaf-interleave-app-mode-map
    (:bind
     "C-c M-i"  'eaf-interleave-add-note
     "C-c M-o"  'eaf-interleave-open-notes-file
     "C-c M-q"  'eaf-interleave-quit))
  (add-hook 'eaf-pdf-viewer-hook 'eaf-interleave-app-mode)
  (add-hook 'eaf-browser-hook 'eaf-interleave-app-mode)
  ;; (add-hook 'org-mode-hook 'eaf-interleave-mode)
  )
#+end_src
** holo-layer
#+begin_src elisp :tangle no
(setup holo-layer
  (when (eq system-type 'darwin)
    (require 'holo-layer)
    (setq holo-layer-enable-cursor-animation t
          holo-layer-enable-window-border nil
          holo-layer-enable-place-info nil
          holo-layer-hide-mode-line nil
          holo-layer-enable-indent-rainbow t
          holo-layer-enable-type-animation t
          holo-layer-type-animation-style "flame"
          holo-layer-python-command "~/.pyenv/shims/python3"
          n
          )
    (holo-layer-enable)
    )
  )
#+end_src
** app-launcher
#+begin_src elisp
(setup app-launcher)
#+end_src
** ai related
*** gptel
#+begin_src elisp
(setup gptel
  (setq gptel-default-mode 'org-mode
        gptel-crowdsourced-prompts-file (concat nowis-doc-emacs-dir "09-scripts/chatgpt.csv")
        gptel-model "gpt-4o"
        )
  (:global "M-p" gptel-send
           "M-P" gptel)
  (:when-loaded
    (setq-default gptel-backend
                  (gptel-make-openai "chatanywhere"
                    :host "api.chatanywhere.com.cn"
                    :header (lambda () `(("Authorization" . ,(concat "Bearer " (gptel--get-api-key)))))
                    :key 'gptel-api-key
                    :stream t
                    :models '("gpt-4o-mini" "gpt-4o")))
    (gptel-make-gemini "Gemini" :key 'gptel-api-key :stream t)
    ))
#+end_src
*** whisper
#+begin_src elisp
(setup whisper
  (setq whisper-language "auto"
        whisper-model "small"
        whisper-translate nil
        whisper-use-threads (num-processors))

  (:when-loaded
    ;; make whisper to break sentense
    (defun whisper--break-sentences (n)
      "Put a paragraph break every N sentences."
      (catch 'return
        (while t
          (dotimes (_ n)
            (forward-sentence 1)
            (when (eobp) (throw 'return nil)))
          (insert "\n\n")
          (when (= (char-after) ?\ )
            (delete-horizontal-space)))))
    (add-hook 'whisper-post-process-hook
              (lambda ()
                (whisper--break-sentences 1))) ;; add a paragraph break every 5 sentences

    ;; make whisper output punctuation
    (setq prompt_ch "以下是普通话的句子,")
    (defun whisper-command (input-file)
      "Produces whisper.cpp command to be run on the INPUT-FILE.

If you want to use something other than whisper.cpp, you should override this
function to produce the command for the inference engine of your choice."
      (let ((base (expand-file-name (file-name-as-directory whisper--install-path))))
        `(,(concat base (if (eq system-type 'windows-nt) "main.exe" "main"))
          ,@(when whisper-use-threads (list "--threads" (number-to-string whisper-use-threads)))
          ;; ,@(when whisper-enable-speed-up '("--speed-up"))
          ,@(when whisper-translate '("--translate"))
          ,@(when whisper-show-progress-in-mode-line '("--print-progress"))
          "--language" ,whisper-language
          "--model" ,(whisper--model-file whisper-quantize)
          "--no-timestamps"
          "--prompt" ,prompt_ch
          "--file" ,input-file)))

    (defun rk/get-ffmpeg-device ()
      "Gets the list of devices available to ffmpeg.
The output of the ffmpeg command is pretty messy, e.g.
  [AVFoundation indev @ 0x7f867f004580] AVFoundation video devices:
  [AVFoundation indev @ 0x7f867f004580] [0] FaceTime HD Camera (Built-in)
  [AVFoundation indev @ 0x7f867f004580] AVFoundation audio devices:
  [AVFoundation indev @ 0x7f867f004580] [0] Cam Link 4K
  [AVFoundation indev @ 0x7f867f004580] [1] MacBook Pro Microphone
so we need to parse it to get the list of devices.
The return value contains two lists, one for video devices and one for audio devices.
Each list contains a list of cons cells, where the car is the device number and the cdr is the device name."
      (unless (string-equal system-type "darwin")
        (error "This function is currently only supported on macOS"))

      (let ((lines (string-split (shell-command-to-string "ffmpeg -list_devices true -f avfoundation -i dummy || true") "\n")))
        (cl-loop with at-video-devices = nil
                 with at-audio-devices = nil
                 with video-devices = nil
                 with audio-devices = nil
                 for line in lines
                 when (string-match "AVFoundation video devices:" line)
                 do (setq at-video-devices t
                          at-audio-devices nil)
                 when (string-match "AVFoundation audio devices:" line)
                 do (setq at-audio-devices t
                          at-video-devices nil)
                 when (and at-video-devices
                           (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
                 do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) video-devices)
                 when (and at-audio-devices
                           (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
                 do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) audio-devices)
                 finally return (list (nreverse video-devices) (nreverse audio-devices)))))

    (defun rk/find-device-matching (string type)
      "Get the devices from `rk/get-ffmpeg-device' and look for a device
matching `STRING'. `TYPE' can be :video or :audio."
      (let* ((devices (rk/get-ffmpeg-device))
             (device-list (if (eq type :video)
                              (car devices)
                            (cadr devices))))
        (cl-loop for device in device-list
                 when (string-match-p string (cdr device))
                 return (car device))))

    (defcustom rk/default-audio-device nil
      "The default audio device to use for whisper.el and outher audio processes."
      :type 'string)

    (defun whisper-select-default-audio-device (&optional device-name)
      "Interactively select an audio device to use for whisper.el and other audio processes.
If `DEVICE-NAME' is provided, it will be used instead of prompting the user."
      (interactive)
      (let* ((audio-devices (cadr (rk/get-ffmpeg-device)))
             (indexes (mapcar #'car audio-devices))
             (names (mapcar #'cdr audio-devices))
             (name (or device-name (completing-read "Select audio device: " names nil t))))
        (setq rk/default-audio-device (rk/find-device-matching name :audio))
        (when (boundp 'whisper--ffmpeg-input-device)
          (setq whisper--ffmpeg-input-device (format ":%s" rk/default-audio-device))))))
  )
#+end_src
** webjump
#+begin_src elisp
(setup webjump
  (setq webjump-sites '(
                        ;; Emacs.
                        ;; ("Emacs Home Page" .
                        ;;  "www.gnu.org/software/emacs/emacs.html")

                        ;; Internet search engines.
                        ("Google" .
                         [simple-query "www.google.com"
                                       "www.google.com/search?q=" ""])
                        ("DouBan DuShu" .
                         [simple-query "book.douban.com"
                                       "search.douban.com/book/subject_search?search_text=" ""])
                        ("Github" .
                         [simple-query "github.com"
                                       "github.com/search?ref=simplesearch&q=" ""])
                        ("Aur" .
                         [simple-query "aur.archlinux.org"
                                       "aur.archlinux.org/packages?O=0&K=" ""])
                        ("leetcode-cn" .
                         [simple-query "leetcode.cn"
                                       "leetcode.cn/search/?q=" ""])
                        ("superlib" .
                         [simple-query "book.ucdrs.superlib.net"
                                       "http://book.ucdrs.superlib.net/search?sw=" "&allsw=%23%2Call&bCon=&ecode=utf-8&channel=search&Field=all"])
                        )))

#+end_src
** backup scripts
#+begin_src elisp
(defun rsync-push-binary-files()
  (interactive)
  (async-shell-command "rsync -avbihn --exclude '.git' --exclude '.svn' --delete \
     ~/Documents/emacs/02-binary-files/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/02-binary-files/")
  (let ((answer (read-char-choice "Do you want to continue? [y/n] " '(?y ?n))))
    (cond
     ((eq answer ?y)
      (async-shell-command " rsync -avbih --exclude '.git' --exclude '.svn' --delete \
     ~/Documents/emacs/02-binary-files/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/02-binary-files/"))
     ((eq answer ?n) (message "transfer exit")))))

(defun rsync-pull-binary-files()
  (interactive)
  (async-shell-command " rsync -avbih --exclude '.git' --exclude '.svn' --delete\
 lewis-nas@192.168.31.108:/share/my_webdav/rsync/02-binary-files/ ~/Documents/emacs/02-binary-files/"))

(defun backup-sync-tmp-doc()
  (interactive)
  (async-shell-command "
rsync -avihu lewis-nas@192.168.31.108:/share/my_webdav/rsync/tmp/ ~/Downloads/tmp/ \
    && rsync -avih --delete ~/Downloads/tmp/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/tmp/ "))

(transient-define-prefix backup-leader-map()
  "Define leader-key map for backup functions"
  [["rsync"
    ("p" "push doc" rsync-push-binary-files)
    ("F" "pull doc" rsync-pull-binary-files)
    ("t" "sync tmp dir" backup-sync-tmp-doc)]])
#+end_src
** video and music
*** emms
#+begin_src elisp
(setup emms)
;; (require 'emms-setup)
;; (emms-standard)
;; (emms-default-players)
(setq emms-source-file-default-directory "~/Documents/video_music/")
#+end_src
** literate-calc
#+begin_src elisp
(setup literate-calc)
#+end_src
** server
#+begin_src elisp
(setup server
  (:defer
   (progn
     (require 'server)
     (unless (server-running-p)
       (server-start)))
   )
  )
#+end_src
** atomic-chrome
Edit text area on Chrome with Emacs using Atomic Chrome
#+begin_src elisp
(setup websocket)
(setup atomic-chrome
  (setq atomic-chrome-url-major-mode-alist
        '(("leetcode.cn" . c++-ts-mode)
          ("redmine" . textile-mode)))
  (:defer
   (atomic-chrome-start-server))
  )
#+end_src
** macos-ocr
#+begin_src elisp
(defun my/siri-ocr ()
    (interactive)
    (shell-command "shortcuts run \"OCR Selected Area\"")
    (do-applescript "tell application id \"org.gnu.Emacs\" to activate")
  )
(keymap-global-set "C-c M-o" #'my/siri-ocr)
#+end_src
* use single file to load configs
this can avoid errors of native compilation of init.el
** provide
#+begin_src elisp
(provide 'init-config)
#+end_src
** load init-config.el
#+begin_src elisp :tangle ~/.emacs.d/init.el
;; -*- lexical-binding: t; -*-
(add-to-list 'load-path (expand-file-name "modules/" user-emacs-directory))
(require 'init-config)
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
* quick-edit and minimal-file
These 2 files are tangled using noweb and will be used for special purpose.

1. =init-quick-edit.el= will be used to open a file, edit it and close it quickly.
2. =init-mininal.el= is a file to start from scratch in which case you don't want the full-blown configurations.
** init-quick-edit
use the following commands in shell:
#+begin_src bash
emacs -Q --daemon -l ~/.emacs.d/init-quick-edit.el
emacsclient -t -r
#+end_src

#+begin_src elisp :noweb yes :tangle init-quick-edit.el
<<ui-speed-up>>
<<basic-modes>>
<<load-path>>
<<setup>>
<<gcmh>>
<<meow>>
<<transient>>
<<meow-leader-keys>>
<<which-key>>
<<font>>
<<line-number>>
<<simple>>
<<general-builtin-modes>>
<<exec-path-from-shell>>
<<vundo>>
<<vertico>>
<<orderless>>
<<consult>>
<<winner-mode>>
<<ibuffer>>
;; <<tab-bar>>
;; <<tabspaces>>
<<eshell>>
#+end_src
** init-minimal
